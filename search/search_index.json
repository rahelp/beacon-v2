{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Beacon v2 Documentation \u00b6 Approved GA4GH Standard On 2022-04-21 Beacon v2 has been approved as an official GA4GH standard through the GA4GH steering committee. With growing interest from the community in the implementation of the Beacon protocol into resources and workflows, the major 2.0 release scheduled for Spring 2022 will introduce new features which were considered important by the community. Beacon v2 specification The core documentation (i.e. this document) can be found on here . Informations for Different Types of Beacon Users \u00b6 The Beacon documentation provides information for different types of users, depending on their interests and use cases. Although those will overlap, we highlight information relevant for some general scenarios throughout the documentation. Users \u00b6 A Beacon user (or end-user) is interested in querying Beacon instances and networks, either through web interfaces by using the Beacon API. While users of Beacon web forms in principle do not need to understand the underlying query syntax and response formats they too may benefit from some insights into the general capabilities of the underlying protocol. User Beacon v2 Models Knowing what is available in an instance Data Models and Schemas Beacon Flavours & Response Granularity Security Other Request, Response & Error Elements Using Beacon v2 Features Genomic Variant Queries Filters for Phenotypes, Diseases & Other Parameters Alternative Schemas Link Deployers and Implementers \u00b6 A Beacon Deployer is someone who wants to make their genomics resource accessible through the Beacon protocol, without necessarily being interested or experienced in the computational aspects; while a Beacon Implementer provides the technical expertise (and potentially may get involved with Beacon development itself, e.g. to extend the protocol for novel use cases). Deployer Beacon v2 Models Reference Implementation Link Infrastructure requirements How to install Configuration Cohorts and/or Datasets Entry types Filtering terms Alternative schemas Granularity & Security Administration Testing the instance Implementer Beacon v2 Framework Models Protocol basics Requests , responses & errors OpenAPI Beacon v2 Features Filters Alternative schemas Link Configuration Granularity & security Link Verifying compliance Stakeholder \u00b6 Stakeholder Integration into GA4GH Leveraging The Beacon Framework in other domains Success Stories: Implementations Real world data","title":"Introduction"},{"location":"#informations-for-different-types-of-beacon-users","text":"The Beacon documentation provides information for different types of users, depending on their interests and use cases. Although those will overlap, we highlight information relevant for some general scenarios throughout the documentation.","title":"Informations for Different Types of Beacon Users"},{"location":"#users","text":"A Beacon user (or end-user) is interested in querying Beacon instances and networks, either through web interfaces by using the Beacon API. While users of Beacon web forms in principle do not need to understand the underlying query syntax and response formats they too may benefit from some insights into the general capabilities of the underlying protocol. User Beacon v2 Models Knowing what is available in an instance Data Models and Schemas Beacon Flavours & Response Granularity Security Other Request, Response & Error Elements Using Beacon v2 Features Genomic Variant Queries Filters for Phenotypes, Diseases & Other Parameters Alternative Schemas Link","title":"Users"},{"location":"#deployers-and-implementers","text":"A Beacon Deployer is someone who wants to make their genomics resource accessible through the Beacon protocol, without necessarily being interested or experienced in the computational aspects; while a Beacon Implementer provides the technical expertise (and potentially may get involved with Beacon development itself, e.g. to extend the protocol for novel use cases). Deployer Beacon v2 Models Reference Implementation Link Infrastructure requirements How to install Configuration Cohorts and/or Datasets Entry types Filtering terms Alternative schemas Granularity & Security Administration Testing the instance Implementer Beacon v2 Framework Models Protocol basics Requests , responses & errors OpenAPI Beacon v2 Features Filters Alternative schemas Link Configuration Granularity & security Link Verifying compliance","title":"Deployers and Implementers"},{"location":"#stakeholder","text":"Stakeholder Integration into GA4GH Leveraging The Beacon Framework in other domains Success Stories: Implementations Real world data","title":"Stakeholder"},{"location":"beacon-flavours/","text":"Beacon \"Flavours\" \u00b6 About UI Most of the information that you will find here is related to the Beacon v2 specification . For that reason, the examples are shown as REST API requests/responses in the form of JSON . If you are only interested in using beacon with a graphical interface please visit the implementations page. While the original Beacon v1 only provided Boolean ( i.e. YES/NO ) responses on queries for the existence of specific genomic variants, Beacon v2 is a flexible protocol that supports different usage scenarios - also called \"flavours\", since they are more a representation of usage types w/o prescribing their specific details. Importantly, the Beacon framework separates query options from the response side. In that way a privacy-protecting 1 Boolean Beacon still may offer more query features - and therefore better usability - compared to the first Beacon concept implementations. Technical Notes For detailed information about the technical implementation of the different logical scopes please see the Framework documentation. Aggregate Response Beacons - Boolean and Count \u00b6 A Boolean Response Beacon is in it's response similar to Beacon v1 - i.e. responding with a true or false value when queried for the existence of some data in a resource. Similarly a Count Response Beacon only returns aggregate information, i.e. the number of matched entries (e.g. genomic variants), a feature also part of the Beacon v1 protocol. However, in contrast to earlier versions, in Beacon v2 in principle a beaconized resource may implement all types of query options (e.g. combinations of various filters and genomic query parameters) but still only offer a Boolean and optionally Count response. Also, all Beacons should implement the Boolean Response format as fallback option and handle extended options depending on the user's authentication status. Boolean Response in v2 Count Response in v2 { \"meta\" : { \"apiVersion\" : \"v2.0.0\" , \"__other_meta_parameters__\" : \"...\" \"receivedRequestSummary\" : { \"requestedGranularity\" : \"boolean\" , \"__other_request_parameters__\" : \"...\" }, \"returnedGranularity\" : \"boolean\" }, \"responseSummary\" : { \"exists\" : true } } { \"meta\" : { \"apiVersion\" : \"v2.0.0\" , \"__other_meta_parameters__\" : \"...\" \"receivedRequestSummary\" : { \"requestedGranularity\" : \"count\" , \"__other_request_parameters__\" : \"...\" }, \"returnedGranularity\" : \"count\" }, \"responseSummary\" : { \"exists\" : true , \"numTotalResults\" : 42 } } Beacons Supporting Data and Information Delivery \u00b6 Technical Notes For detailed information about the technical implementation of the different logical scopes please see the Models documentation. Beacon Default Data Model \u00b6 The Beacon v2 default data model provides a set of schemas for common data entities with a focus on biomedical genomics (although neither specific to medical application or human genomics per se ). In contrast to earlier versions of the protocol, the Beacon v2 default models provide the technical blueprint for rich, structured data responses to Beacon queries, such as annotated genomic variations, biosamples from which matched variants were retrieved or data about individuals and study cohorts, where available and authorized. Detailed information is available through the Models Introduction and the default schemas documented from there. Alternative Data Models \u00b6 In principle, the separation of framework and models allows for different models in domains outside of the genomics focussed Beacon v2 realm, e.g. \u201cImaging Beacon\u201d, to be built using the same Framework. [H\u2014>O] Beacon Handovers for Data Delivery \u00b6 While the Beacon v1 response was restricted to aggregate data and Beacon v2 itself provides schemas for structuring response objects (e.g. henomic variation or biosample data) the protocol can be expanded by providing custom access methods to data elements matched by a Beacon query. Since November 2018, Beacon v1.n has included support for a \"handover\" protocol, in which rich data content can be provided from linked services, initiated through a Beacon query 2 . Typical examples of Handover use include: access to restricted data, in which a handover URL points to data behind an authentication service or Firewall delivery of large/binary datasets, e.g. original array data or BAM files for a given analysis asynchronous calls in which a front-end follows handover URLs for additional data Privacy protecting as in \"reasonably protecting by design but not immune to complex re-identification attacks\". \u21a9 An early discussion of the topic can e.g. be found in the Beacon developer area on Github . As of 2018-11-13, the handover concept had become part of the code development . \u21a9","title":"Beacon Flavours"},{"location":"beacon-flavours/#aggregate-response-beacons-boolean-and-count","text":"A Boolean Response Beacon is in it's response similar to Beacon v1 - i.e. responding with a true or false value when queried for the existence of some data in a resource. Similarly a Count Response Beacon only returns aggregate information, i.e. the number of matched entries (e.g. genomic variants), a feature also part of the Beacon v1 protocol. However, in contrast to earlier versions, in Beacon v2 in principle a beaconized resource may implement all types of query options (e.g. combinations of various filters and genomic query parameters) but still only offer a Boolean and optionally Count response. Also, all Beacons should implement the Boolean Response format as fallback option and handle extended options depending on the user's authentication status. Boolean Response in v2 Count Response in v2 { \"meta\" : { \"apiVersion\" : \"v2.0.0\" , \"__other_meta_parameters__\" : \"...\" \"receivedRequestSummary\" : { \"requestedGranularity\" : \"boolean\" , \"__other_request_parameters__\" : \"...\" }, \"returnedGranularity\" : \"boolean\" }, \"responseSummary\" : { \"exists\" : true } } { \"meta\" : { \"apiVersion\" : \"v2.0.0\" , \"__other_meta_parameters__\" : \"...\" \"receivedRequestSummary\" : { \"requestedGranularity\" : \"count\" , \"__other_request_parameters__\" : \"...\" }, \"returnedGranularity\" : \"count\" }, \"responseSummary\" : { \"exists\" : true , \"numTotalResults\" : 42 } }","title":"Aggregate Response Beacons - Boolean and Count"},{"location":"beacon-flavours/#beacons-supporting-data-and-information-delivery","text":"Technical Notes For detailed information about the technical implementation of the different logical scopes please see the Models documentation.","title":"Beacons Supporting Data and Information Delivery"},{"location":"beacon-flavours/#beacon-default-data-model","text":"The Beacon v2 default data model provides a set of schemas for common data entities with a focus on biomedical genomics (although neither specific to medical application or human genomics per se ). In contrast to earlier versions of the protocol, the Beacon v2 default models provide the technical blueprint for rich, structured data responses to Beacon queries, such as annotated genomic variations, biosamples from which matched variants were retrieved or data about individuals and study cohorts, where available and authorized. Detailed information is available through the Models Introduction and the default schemas documented from there.","title":"Beacon Default Data Model"},{"location":"beacon-flavours/#alternative-data-models","text":"In principle, the separation of framework and models allows for different models in domains outside of the genomics focussed Beacon v2 realm, e.g. \u201cImaging Beacon\u201d, to be built using the same Framework.","title":"Alternative Data Models"},{"location":"beacon-flavours/#ho-beacon-handovers-for-data-delivery","text":"While the Beacon v1 response was restricted to aggregate data and Beacon v2 itself provides schemas for structuring response objects (e.g. henomic variation or biosample data) the protocol can be expanded by providing custom access methods to data elements matched by a Beacon query. Since November 2018, Beacon v1.n has included support for a \"handover\" protocol, in which rich data content can be provided from linked services, initiated through a Beacon query 2 . Typical examples of Handover use include: access to restricted data, in which a handover URL points to data behind an authentication service or Firewall delivery of large/binary datasets, e.g. original array data or BAM files for a given analysis asynchronous calls in which a front-end follows handover URLs for additional data Privacy protecting as in \"reasonably protecting by design but not immune to complex re-identification attacks\". \u21a9 An early discussion of the topic can e.g. be found in the Beacon developer area on Github . As of 2018-11-13, the handover concept had become part of the code development . \u21a9","title":"[H\u2014&gt;O] Beacon Handovers for Data Delivery"},{"location":"bugs-changes-log/","text":"TODO, Bugs & Changes \u00b6 TODO \u00b6 Documentation \u00b6 re-structuring of Framework page add part about necessary files, dependening on installation type (e.g. if not needing to support OpenAPI) fix https (probably @mbaudis has to do some registrar configuration...) add more Implementations extend Query documentation expand the table comparing different \"variant types\" use more content from the variant scouts document Repositories \u00b6 retiring of framework and model repos Changes \u00b6 2022-05-11: Retiring ReadTheDocs configuration & more \u00b6 removed ReadTheDocs configuration files added some \"how to implement\" instructions 2022-04-21: GA4GH approval notice \u00b6 2022-04-18: Documentation updates \u00b6 Shuffled small fragments to facilitate comprehension. 2022-04-17: Documentation updates \u00b6 Updated default schemas tables according to the newest changes. Moved filters.md from section Beacon Components to Implement... . Dismissed pages w/o content ( _rest-api.md and _tips-for-implementers.md ). Dismissed link to RTD version (deprecated). 2022-04-01: Documentation updates \u00b6 Partial update of Default schemas Tables (still work in progress) Updated bin files that parse JSON schemas 2022-03-30: Documentation updates \u00b6 Updated diagram in Models page. Removal of some outdated text, e.g. reference to TEMPLATE model (for now) continuous updates from upstream 2022-03-28: Documentation updates \u00b6 added content to the Standards page (VRS, Phenopackets, coordinates) Queries page now with comparison table for (some) variant type terms 2022-03-25: Miscellanea changes in docs/*.md \u00b6 Changes in multiple Markdown pages. Moved from mermaid to mermaid2 plugin. 2022-03-24: Retiring Separate Implementations Repository \u00b6 Started adding content to pages such as networks.md and roles.md` Moved pages to different locations in navigation. Created security.md under Beacon Types . Example implementations have been moved from the implementations-v2 repository to the Beacon v2 Documentation - web access here . 2022-03-23: Name Change to beacon-v2 \u00b6 The repository name and file paths have been changed from beacon-v2-unity-testing to beacon-v2 . Added miscellanea suggestions from Jorge (not all of them). 2022-03-22: More Reorganization of Navigation \u00b6 Moved content from implementations-and-networks to other-implementations and left only the \"Networks\" Part. Added mkdocs-mermaid2-plugin both to mkdocs.yaml and to github workflows. Moved Schemas (Markdown Tables) and Terms List from main navigation to Beacon Compoments/Models Reorganization of navigation Added pages: Tips for Implementers 2022-03-21: Reorganization of navigation \u00b6 Reorganization of navigation Deleted page implement-and-deploy.md Added pages: What is Beacon v2 and Implementation options Filters Page Updated 2022-03-18: Macros and Variables for Documentation pages \u00b6 The mkdocs-macros-plugin has been activated, allowing the use of site-wide variables: repo_model_url: https://github.com/ga4gh-beacon/beacon-v2/tree/main/models/src this can be used inline as {{ no such element: mkdocs.config.base.Config object['repo_model_url'] }} 2022-03-16: Documentation Content and Formats Updates \u00b6 addition of more variant query examples new landing pages for Implementations and Networks and Standards Integration many adjustments to documentation structure, appearance and representation (e.g. content tabs for query examples) 2022-03-14: Documentation in Repository \u00b6 As of today the new/emerging Beacon v2 documentation is meintained in this repository. We're testing rendered versions (same text/code base) through Github actions ( here ) and ReadTheDocs . testing of ReadTheDocs version vs. a material themed build created and linked docs.genomebeacons.org sub-domain to the Github hosted version of the rendered documentation merging of previous separate documentation repository content from beacon-v2-schema-documentation in the \"unity\" repository and archiving of the old one 2022-03-11: Removing yaml export version \u00b6 Since moving to source in YAML the existence of a separate yaml export seems unnecessary & maybe confusing. Removed. 2022-03-09: Nesting models \u00b6 The structure of the models directory has now be changed to have the default model as one of possibly multiple options as per the discussions in #1 . The current structure (below) might not be final (e.g. placing of the beaconConfiguration.yaml , beaconMap.yaml , endpoints.yaml files?). beacon | |-- framework ... |-- models | |-- src | | |-- beacon-v2-default-model | | |-- analyses ... | | |-- biosamples ... | | |-- genomicVariations ... | | |-- ... | | |-- endpoints.yaml | | | |-- json | |-- beacon-v2-default-model | |-- analyses ... | |-- biosamples ... | |-- genomicVariations ... | |-- ... | |-- endpoints.yaml | |-- bin ... |-- docs ... ... 2022-03-08: Automated pulling from current origin repos \u00b6 added simple pull commands to the conversion for automatic update to the donor repos git -C $BEACONMODELPATH pull git -C $BEACONFRAMEWORKPATH pull updated to current crop of PRs 2022-02-24: Path fixes \u00b6 changed the path replacements to the current repo, resulting in e.g. raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/framework/json/responses/sections/beaconInformationalResponseMeta.json 2022-02-23: Re-tool \u00b6 replacement of the previopus general yamler.py with a dedicated beaconYamler.py moving replacements to bin/config.yaml requirement for complete arguments (in and out paths, in- and out formats) - see bin/yamlerRunner.sh 2022-02-22: Creation of repository \u00b6 design of directory structure test tooling & population with auto-converted files","title":"Changes"},{"location":"bugs-changes-log/#todo","text":"","title":"TODO"},{"location":"bugs-changes-log/#documentation","text":"re-structuring of Framework page add part about necessary files, dependening on installation type (e.g. if not needing to support OpenAPI) fix https (probably @mbaudis has to do some registrar configuration...) add more Implementations extend Query documentation expand the table comparing different \"variant types\" use more content from the variant scouts document","title":"Documentation"},{"location":"bugs-changes-log/#repositories","text":"retiring of framework and model repos","title":"Repositories"},{"location":"bugs-changes-log/#changes","text":"","title":"Changes"},{"location":"citation/","text":"Citation(s) \u00b6 Beacon v2 \u00b6 Citation Beacon v2 and Beacon Networks: a \"lingua franca\" for federated data discovery in biomedical genomics, and beyond. Jordi Rambla, Michael Baudis, Tim Beck, Lauren A. Fromont, Arcadi Navarro, Manuel Rueda, Gary Saunders, Babita Singh, J.Dylan Spalding, Juha Tornroos, Claudia Vasallo, Colin D.Veal, Anthony J.Brookes. Human Mutation (2022) DOI .","title":"Citation"},{"location":"citation/#beacon-v2","text":"Citation Beacon v2 and Beacon Networks: a \"lingua franca\" for federated data discovery in biomedical genomics, and beyond. Jordi Rambla, Michael Baudis, Tim Beck, Lauren A. Fromont, Arcadi Navarro, Manuel Rueda, Gary Saunders, Babita Singh, J.Dylan Spalding, Juha Tornroos, Claudia Vasallo, Colin D.Veal, Anthony J.Brookes. Human Mutation (2022) DOI .","title":"Beacon v2"},{"location":"filter-queries/","text":"Filters in Queries \u00b6 For all query types, the logical AND is implied between Filters. The Filter id is required for all query types. Filters in GET Requests GET requests use a filters parameter for one or more (comma-separated) filter id values. In this case general filter defaults apply (e.g. { \"includeDescendantTerms\": true } ). Generally, use of filters other than CURIE values for filter ids is discouraged. Simple CURIE based filters query \u00b6 The following query retrieves (or filters retrieved...) data matching the diagnosis of Papillary Renal Cell Carcinoma (NCIT:C6975) from a publication identified through its PubMed id (22824167): GET POST /biosamples?filters=PMID:22824167,NCIT:C6975 \"filters\" : [ { \"id\" : \"PMID:22824167\" }, { \"id\" : \"NCIT:C6975\" } ] Hierarchical ontology query \u00b6 A Beacon will query for entities associated with the submitted bio-ontology term(s), and by default, all descendent terms. The optional includeDescendantTerms parameter can be set to either true or false . The default and assumed value of includeDescendantTerms is true , thus if the parameter is not set, then the use of bio-ontology terms in a Beacon request implies that a hierarchical ontology search is requested. Request example of two filters, where one filter excludes matches with descendent terms: POST \"filters\" : [ { \"id\" : \"HP:0100526\" , \"includeDescendantTerms\" : false }, { \"id\" : \"HP:0005978\" } ] Semantic similarity query \u00b6 A Beacon will query for entities that are associated with bio-ontology terms that are similar to the submitted terms. The Beacon API is agnostic to the semantic similarity model implemented by a Beacon and how a Beacon applies the relative thresholds of similarity. A semantic similarity query request contains the required similarity parameter with a value set to define the relative threshold level of high , medium or low . POST request example of two Filters using differing relative similarity thresholds: \"filters\" : [ { \"id\" : \"HP:0100526\" , \"similarity\" : \"high\" }, { \"id\" : \"HP:0005978\" , \"similarity\" : \"medium\" } ] Numerical value query \u00b6 A Beacon will query for quantitative properties when the required operator and numerical value parameters are set in the filters request. The id parameter identifies the field name, the operator parameter defines the operator to use, and the value parameter provides the field query value. Equality and relational operators (= < >) can be used between field name and field value pairs, and field values can be associated with units if applicable. POST request example of a Filter for individuals over 70 years of age (age = PATO:0000011, age syntax as ISO 8601): \"filters\" : [ { \"id\" : \"PATO:0000011\" , \"operator\" : \">\" , \"value\" : \"P70Y\" } ] Alphanumerical value query \u00b6 A Beacon will query free-text values within fields when the required operator and alphanumerical value parameters are set in the filters request. Queries can be for exact alphanumerical values, used to exclude alphanumerical values, or employ wildcards to match patterns within alphanumerical values. In all query classes, the id parameter identifies the field name, the operator parameter defines the operator to use, and the value parameter provides the field query value. 'EXACT' value query \u00b6 The operator parameter is set to the equality (=) operator. POST request example of using free-text to filter medical history (past medical history = HP:0032443): \"filters\" : [ { \"id\" : \"HP:0032443\" , \"operator\" : \"=\" , \"value\" : \"unknown medical history\" } ] 'LIKE' value query The inclusion of a percent sign (%) wildcard character within the value parameter represents zero or more characters within a LIKE style string match. The wildcard character can lead the query string, end the string, or surround the string. POST request example to filter medical history free-text for any reference to cancer: \"filters\" : [ { \"id\" : \"HP:0032443\" , \"operator\" : \"=\" , \"value\" : \"%cancer%\" } ] 'NOT' value query \u00b6 The operator parameter is set to the logical not (!) operator. The value parameter should not be present in field value. The wildcard character can be used if required. POST request example to filter medical history free-text for records that do not include the query string: \"filters\" : [ { \"id\" : \"HP:0032443\" , \"operator\" : \"!\" , \"value\" : \"unknown medical history\" } ]","title":"Filters in Queries"},{"location":"filter-queries/#simple-curie-based-filters-query","text":"The following query retrieves (or filters retrieved...) data matching the diagnosis of Papillary Renal Cell Carcinoma (NCIT:C6975) from a publication identified through its PubMed id (22824167): GET POST /biosamples?filters=PMID:22824167,NCIT:C6975 \"filters\" : [ { \"id\" : \"PMID:22824167\" }, { \"id\" : \"NCIT:C6975\" } ]","title":"Simple CURIE based filters query"},{"location":"filter-queries/#hierarchical-ontology-query","text":"A Beacon will query for entities associated with the submitted bio-ontology term(s), and by default, all descendent terms. The optional includeDescendantTerms parameter can be set to either true or false . The default and assumed value of includeDescendantTerms is true , thus if the parameter is not set, then the use of bio-ontology terms in a Beacon request implies that a hierarchical ontology search is requested. Request example of two filters, where one filter excludes matches with descendent terms: POST \"filters\" : [ { \"id\" : \"HP:0100526\" , \"includeDescendantTerms\" : false }, { \"id\" : \"HP:0005978\" } ]","title":"Hierarchical ontology query"},{"location":"filter-queries/#semantic-similarity-query","text":"A Beacon will query for entities that are associated with bio-ontology terms that are similar to the submitted terms. The Beacon API is agnostic to the semantic similarity model implemented by a Beacon and how a Beacon applies the relative thresholds of similarity. A semantic similarity query request contains the required similarity parameter with a value set to define the relative threshold level of high , medium or low . POST request example of two Filters using differing relative similarity thresholds: \"filters\" : [ { \"id\" : \"HP:0100526\" , \"similarity\" : \"high\" }, { \"id\" : \"HP:0005978\" , \"similarity\" : \"medium\" } ]","title":"Semantic similarity query"},{"location":"filter-queries/#numerical-value-query","text":"A Beacon will query for quantitative properties when the required operator and numerical value parameters are set in the filters request. The id parameter identifies the field name, the operator parameter defines the operator to use, and the value parameter provides the field query value. Equality and relational operators (= < >) can be used between field name and field value pairs, and field values can be associated with units if applicable. POST request example of a Filter for individuals over 70 years of age (age = PATO:0000011, age syntax as ISO 8601): \"filters\" : [ { \"id\" : \"PATO:0000011\" , \"operator\" : \">\" , \"value\" : \"P70Y\" } ]","title":"Numerical value query"},{"location":"filter-queries/#alphanumerical-value-query","text":"A Beacon will query free-text values within fields when the required operator and alphanumerical value parameters are set in the filters request. Queries can be for exact alphanumerical values, used to exclude alphanumerical values, or employ wildcards to match patterns within alphanumerical values. In all query classes, the id parameter identifies the field name, the operator parameter defines the operator to use, and the value parameter provides the field query value.","title":"Alphanumerical value query"},{"location":"filter-queries/#exact-value-query","text":"The operator parameter is set to the equality (=) operator. POST request example of using free-text to filter medical history (past medical history = HP:0032443): \"filters\" : [ { \"id\" : \"HP:0032443\" , \"operator\" : \"=\" , \"value\" : \"unknown medical history\" } ] 'LIKE' value query The inclusion of a percent sign (%) wildcard character within the value parameter represents zero or more characters within a LIKE style string match. The wildcard character can lead the query string, end the string, or surround the string. POST request example to filter medical history free-text for any reference to cancer: \"filters\" : [ { \"id\" : \"HP:0032443\" , \"operator\" : \"=\" , \"value\" : \"%cancer%\" } ]","title":"'EXACT' value query"},{"location":"filter-queries/#not-value-query","text":"The operator parameter is set to the logical not (!) operator. The value parameter should not be present in field value. The wildcard character can be used if required. POST request example to filter medical history free-text for records that do not include the query string: \"filters\" : [ { \"id\" : \"HP:0032443\" , \"operator\" : \"!\" , \"value\" : \"unknown medical history\" } ]","title":"'NOT' value query"},{"location":"filters/","text":"Filters \u00b6 Filters represent a powerful addition to the Beacon query API. They are rules for selecting records based upon the field values those records contain. The rules can refer to bio-ontology or custom terms, numerical or alphanumerical values, and employ wildcards, standard operators or other principles of selection. This empowers such options as queries for phenotypes, disease codes or technical parameters associated with observed genomic variants. Using Filters Please see the Filters in Queries page for more information on how to use filters in Beacon requests. Filter types \u00b6 A Beacon can support four types of Filters. Bio-ontology terms for biomedical data or procedural metadata that are contained in public repositories such as the EMBL-EBI Ontology Lookup Service or the NCBO BioPortal . Bio-ontology terms are identified using the full term/class identifier as CURIE, e.g. \u201cHP:0100526\u201d. Custom terms for biomedical or metadata terms that are locally defined by a Beacon (e.g. not corresponding to known bio-ontology terms). Custom terms must contain unique identifiers that are used in Beacon requests. Numerical values include integer, decimal and float data types. Alphanumerical values include alphabetic letters and special characters with or without numbers. /filtering_terms informational endpoint \u00b6 The /filtering_terms endpoint returns a list of all data fields whose values may be subjected to filtering, plus the data type(s) for those fields, and/or the list of extant values for each of those data fields in the current dataset. In addition, for each bio-ontology used by a Beacon, the endpoint response includes a description of the bio-ontology in Phenopackets Resource format. The endpoint's filterTerms response identifies the Filter types. Bio-ontology and custom term Filter types contain: type = resource name (required) id = term id (required) label = term label (optional) \"response\":{ \"resources\":[ { \"id\":\"hp\", \"name\":\"Human Phenotype Ontology\", \"url\":\"http://purl.obolibrary.org/obo/hp.owl\", \"version\":\"27-03-2020\", \"namespacePrefix\":\"HP\", \"iriPrefix\":\"http://purl.obolibrary.org/obo/HP_\" }, ... ], \"filterTerms\": [ { \"type\": \"Human Phenotype Ontology\", \"id\": \"HP:0008773\", \"label\": \"neoplasm of the lung\" }, ... ] } Numerical value Filter types contain: type = data type as 'numeric' (required) id = field id (required) label = field label (optional) \"filterTerms\": [ { \"type\": \"numeric\", \"id\": \"PATO:000001\", \"label\": \"age\" }, ... ] Alphanumerical value Filter types contain: type = data type as 'alphanumeric' (required) id = field id (required) label = field label (optional) \"filterTerms\": [ { \"type\": \"alphanumeric\", \"id\": \"HP:0032443\", \"label\": \"past medical history\" }, ... ]","title":"Filters"},{"location":"filters/#filter-types","text":"A Beacon can support four types of Filters. Bio-ontology terms for biomedical data or procedural metadata that are contained in public repositories such as the EMBL-EBI Ontology Lookup Service or the NCBO BioPortal . Bio-ontology terms are identified using the full term/class identifier as CURIE, e.g. \u201cHP:0100526\u201d. Custom terms for biomedical or metadata terms that are locally defined by a Beacon (e.g. not corresponding to known bio-ontology terms). Custom terms must contain unique identifiers that are used in Beacon requests. Numerical values include integer, decimal and float data types. Alphanumerical values include alphabetic letters and special characters with or without numbers.","title":"Filter types"},{"location":"filters/#filtering_terms-informational-endpoint","text":"The /filtering_terms endpoint returns a list of all data fields whose values may be subjected to filtering, plus the data type(s) for those fields, and/or the list of extant values for each of those data fields in the current dataset. In addition, for each bio-ontology used by a Beacon, the endpoint response includes a description of the bio-ontology in Phenopackets Resource format. The endpoint's filterTerms response identifies the Filter types. Bio-ontology and custom term Filter types contain: type = resource name (required) id = term id (required) label = term label (optional) \"response\":{ \"resources\":[ { \"id\":\"hp\", \"name\":\"Human Phenotype Ontology\", \"url\":\"http://purl.obolibrary.org/obo/hp.owl\", \"version\":\"27-03-2020\", \"namespacePrefix\":\"HP\", \"iriPrefix\":\"http://purl.obolibrary.org/obo/HP_\" }, ... ], \"filterTerms\": [ { \"type\": \"Human Phenotype Ontology\", \"id\": \"HP:0008773\", \"label\": \"neoplasm of the lung\" }, ... ] } Numerical value Filter types contain: type = data type as 'numeric' (required) id = field id (required) label = field label (optional) \"filterTerms\": [ { \"type\": \"numeric\", \"id\": \"PATO:000001\", \"label\": \"age\" }, ... ] Alphanumerical value Filter types contain: type = data type as 'alphanumeric' (required) id = field id (required) label = field label (optional) \"filterTerms\": [ { \"type\": \"alphanumeric\", \"id\": \"HP:0032443\", \"label\": \"past medical history\" }, ... ]","title":"/filtering_terms  informational endpoint"},{"location":"formats-standards/","text":"Formats, Standards and Integrations \u00b6 Data Formats and Standards \u00b6 Coding and naming conventions \u00b6 For historical reasons, in the names of entities, parameters and URLs we are following these conventions: Entity names: PascalCase parameters: camelCase URI path elements: snake_case The only exception is: service-info which is a required GA4GH standard and has a different word separation convention. Schema Language and Conventions \u00b6 The Beacon v2 API follows OpenAPI 3.0.2 specification for the endpoints , in conjuntion with JSON Schema ( 2020-12 ) to define the Framework and the Models components. The specification uses JSON references ($ref) to reference internal (e.g., definitions) or external concepts/terms (e.g., VRS ). The Beacon v2 specification is written in YAML . The original files are located under src directory (see below). For technical purposes, we also provide a copy of the original YAML in JSON format (see json directory below). Changes in the specification must be performed in the YAML version. Framework Models framework |-- json | |-- common | | |-- examples | | `-- validation | |-- configuration | | `-- examples | |-- requests | | |-- examples-fullDocuments | | |-- examples-sections | | `-- validation | `-- responses | |-- examples-fullDocuments | |-- examples-sections | `-- sections `-- src |-- common | |-- examples | `-- validation |-- configuration | `-- examples |-- requests | |-- examples-fullDocuments | |-- examples-sections | `-- validation `-- responses |-- examples-fullDocuments |-- examples-sections `-- sections models |-- json | `-- beacon-v2-default-model | |-- analyses | | `-- examples | |-- biosamples | | `-- examples | |-- cohorts | | `-- examples | |-- common | |-- datasets | | `-- examples | |-- genomicVariations | | `-- examples | |-- individuals | | `-- examples | `-- runs | `-- examples `-- src `-- beacon-v2-default-model |-- analyses | `-- examples |-- biosamples | `-- examples |-- cohorts | `-- examples |-- common |-- datasets | `-- examples |-- genomicVariations | `-- examples |-- individuals | `-- examples `-- runs `-- examples Genome Coordinates \u00b6 GA4GH Genome Coordinate Use Recommendation 1 We recommends the use of \"0-start, half-open\" (interbase) coordinate system in all systems \"1-start, fully-closed\" should be used when displaying coordinates through a GUI or report Dates and Times \u00b6 Date and time formats are specified as ISO8601 compatible strings, both for time points as well as for durations. Some of the ISO8601 compatible formats have not (yet) been used in the Beacon v2 default model. Examples \u00b6 time stamp in milliseconds in YYYY-MM-DDTHH:MM:SS.SSS 2015-02-10T00:03:42.123Z schema specification in JSON Schema is \"type\": \"string\", format\": \"date-time\" Timepoints with millisecond granularity are typical use cases for timing computer generated entries, e.g. the time of a record's update (\"updateTime\"). age in years and months in PnYnM P43Y08M LINK: W3C ISO8601 \u00b6 LINK: ISO8601 documentation at GA4GH SchemaBlocks \u00b6 Integration with External Standards \u00b6 The development of the Beacon v2 framework and default model closely follows and widely adopts concepts and schemas from approved GA4GH products such as Phenopackets and the Variant Representation Standard (VRS). Variant Representation Standard (VRS) \u00b6 The GA4GH Variant Representation Standard (VRS) constitutes the reference one should use when implementing representations of genomic variations. The current version 1.2 has been approved and covers a set of use cases and requirements, especially with respect to genomic (including cytogenetic or feature based) locations. However, it is not yet suitable for a number of practical use cases, especially the representation of some structural variations. The Beacon v2 default model for GenomicVariation makes use of the VRS standard to represent the variation part, i.e. the location and sequence or copy number changes of the genomic variation. While a \"legacy\" alternative is still allowed this one too has been adjusted to make use of the VRS Location format. Examples \u00b6 The examples are for different forma of the location property inside a genomicVariation . Beacon v2 VRS Allele Beacon v2 VRS CNV Beacon v2 legacy SNV Beacon v2 legacy CNV \"variation\" : { \"type\" : \"Allele\" , \"state\" : { \"sequence\" : \"G\" , \"type\" : \"LiteralSequenceExpression\" }, \"location\" : { \"type\" : \"SequenceLocation\" , \"sequence_id\" : \"refseq:NC_000017.11\" , \"interval\" : { \"type\" : \"SequenceInterval\" , \"start\" : { \"type\" : \"Number\" , \"value\" : 7577120 }, \"end\" : { \"type\" : \"Number\" , \"value\" : 7577121 } } } } \"variation\" : { \"type\" : \"RelativeCopyNumber\" , \"relative_copy_class\" : \"partial loss\" , \"location\" : { \"type\" : \"SequenceLocation\" , \"sequence_id\" : \"refseq:NC_000018.10\" , \"interval\" : { \"start\" : { \"type\" : \"Number\" , \"value\" : 23029501 }, \"end\" : { \"type\" : \"Number\" , \"value\" : 62947165 } } } } \"variation\" : { \"variantType\" : \"SNP\" , \"referenceBases\" : \"C\" , \"alternateBases\" : \"G\" , \"location\" : { \"type\" : \"SequenceLocation\" , \"sequence_id\" : \"refseq:NC_000017.11\" , \"interval\" : { \"type\" : \"SequenceInterval\" , \"start\" : { \"type\" : \"Number\" , \"value\" : 7577120 }, \"end\" : { \"type\" : \"Number\" , \"value\" : 7577121 } } } } \"variation\" : { \"variantType\" : \"DEL\" , \"location\" : { \"type\" : \"SequenceLocation\" , \"sequence_id\" : \"refseq:NC_000018.10\" , \"interval\" : { \"start\" : { \"type\" : \"Number\" , \"value\" : 23029501 }, \"end\" : { \"type\" : \"Number\" , \"value\" : 62947165 } } } } LINK: VRS Documentation \u00b6 Phenopackets \u00b6 In the Beacon v2 default data model, many schemas are either directly compatible to Phenopackets v2 building blocks or at least reflect them but with some adjustments. While the Beacon v2 default model's schemas do not per se have to reflect PXF schemas, we target an as-close-as-possible alignment to promote/leverage GA4GH-wide standardization. Top-level differences \u00b6 The Phenopackets model is centered around the Phenopacket , which is the collector and integrator of all sub-schemas (with the addition of the external Family and Cohort schemas). While Phenopacket usually describes information related to a subject - which is defined in an Individual - and the top level elements in Phenopacket relate to a specific proband ( measurements as \"Measurements performed in the proband\"), the phenopacket itself does not explicitely represent an individual. In contrast, the Beacon v2 default model uses a hierarchy in which biosamples reference individuals directly (if existing). For most purposes one can equate Beacon's Individual with a merge of Phenopacket's core Phenopacket and Individual parameters. Building block comparisons: Beacon v2 == PXF v2 \u00b6 Age \u00b6 PXF Age Beacon v2 Age AgeRange \u00b6 PXF AgeRange Beacon v2 AgeRange Evidence \u00b6 PXF Evidence Beacon v2 Evidence KaryotypicSex \u00b6 PXF Beacon ReferenceRange \u00b6 PXF ReferenceRange Beacon v2 ReferenceRange While unit in Beacon points to a Unit definition, this is itself an OntologyTerm i.e. structurally the same. Value \u00b6 PXF Value Beacon v2 Value Beacon v2 =~ PXF v2 (e.g. renamed or additional parameters) \u00b6 ComplexValue \u00b6 PXF ComplexValue Beacon v2 ComplexValue Renamed ComplexValue.TypedQuantity.quantityType compared to GA4GH Phenopackets v2 ComplexValue.TypedQuantity.type due to problematic use of type as parameter ExternalReference \u00b6 PXF ExternalReference Beacon v2 ExternalReference Renamed ExternalReference.notes compared to GA4GH Phenopackets v2 ExternalReference.description due to problematic use of description as parameter Measurement \u00b6 PXF Measurement Beacon v2 Measurement Added notes and date . PhenotypicFeature \u00b6 PXF PhenotypicFeature Beacon v2 PhenotypicFeature Beacon Phenopackets featureType type severity (re-used definition reflecting an ontology term) severity (ontology class) notes Procedure \u00b6 PXF Procedure Beacon v2 Procedure Beacon Phenopackets procedureCode code ageAtProcedure (TimeElement) performed ( TimeElement ) dateOfProcedure (ISO date) TimeElement \u00b6 PXF TimeElement Beacon v2 TimeElement The specific parameters have been aligned w/ minimal differences in naming or use of general parameters. Beacon Phenopackets ontologyTerm ontology_class age age ( Age ) ageRange age_range ( AgeRange ) gestationalAge gestational_age ( GestationalAge ) ...Timestamp timestamp ( TimeStamp ) timeInterval interval ( TimeInterval ) Treatment \u00b6 PXF Treatment Beacon v2 Treatment Beacon still has an ageOfOnset parameter (?). Also, PXF agent has been renamed to a more general treatmentCode . Beacon v2 ~ PXF v2 (e.g. multiple/complex differences) \u00b6 Disease \u00b6 Pedigree \u00b6 While the Beacon & Phenopackets schemas for \"pedigree\" representation are not aligned, they may become superseded by the GA4GH pedigree standard currenty under development. Sex \u00b6 Beacon directly uses the (IMO preferable) representation through an ontology term , while PXF uses an ordinal mapping LINK: Phenopackets Documentation \u00b6 Source: @andrewyatz at SchemaBlocks {S}[B] \u21a9","title":"Standards Integration"},{"location":"formats-standards/#data-formats-and-standards","text":"","title":"Data Formats and Standards"},{"location":"formats-standards/#coding-and-naming-conventions","text":"For historical reasons, in the names of entities, parameters and URLs we are following these conventions: Entity names: PascalCase parameters: camelCase URI path elements: snake_case The only exception is: service-info which is a required GA4GH standard and has a different word separation convention.","title":"Coding and naming conventions"},{"location":"formats-standards/#schema-language-and-conventions","text":"The Beacon v2 API follows OpenAPI 3.0.2 specification for the endpoints , in conjuntion with JSON Schema ( 2020-12 ) to define the Framework and the Models components. The specification uses JSON references ($ref) to reference internal (e.g., definitions) or external concepts/terms (e.g., VRS ). The Beacon v2 specification is written in YAML . The original files are located under src directory (see below). For technical purposes, we also provide a copy of the original YAML in JSON format (see json directory below). Changes in the specification must be performed in the YAML version. Framework Models framework |-- json | |-- common | | |-- examples | | `-- validation | |-- configuration | | `-- examples | |-- requests | | |-- examples-fullDocuments | | |-- examples-sections | | `-- validation | `-- responses | |-- examples-fullDocuments | |-- examples-sections | `-- sections `-- src |-- common | |-- examples | `-- validation |-- configuration | `-- examples |-- requests | |-- examples-fullDocuments | |-- examples-sections | `-- validation `-- responses |-- examples-fullDocuments |-- examples-sections `-- sections models |-- json | `-- beacon-v2-default-model | |-- analyses | | `-- examples | |-- biosamples | | `-- examples | |-- cohorts | | `-- examples | |-- common | |-- datasets | | `-- examples | |-- genomicVariations | | `-- examples | |-- individuals | | `-- examples | `-- runs | `-- examples `-- src `-- beacon-v2-default-model |-- analyses | `-- examples |-- biosamples | `-- examples |-- cohorts | `-- examples |-- common |-- datasets | `-- examples |-- genomicVariations | `-- examples |-- individuals | `-- examples `-- runs `-- examples","title":"Schema Language and Conventions"},{"location":"formats-standards/#genome-coordinates","text":"GA4GH Genome Coordinate Use Recommendation 1 We recommends the use of \"0-start, half-open\" (interbase) coordinate system in all systems \"1-start, fully-closed\" should be used when displaying coordinates through a GUI or report","title":"Genome Coordinates"},{"location":"formats-standards/#dates-and-times","text":"Date and time formats are specified as ISO8601 compatible strings, both for time points as well as for durations. Some of the ISO8601 compatible formats have not (yet) been used in the Beacon v2 default model.","title":"Dates and Times"},{"location":"formats-standards/#integration-with-external-standards","text":"The development of the Beacon v2 framework and default model closely follows and widely adopts concepts and schemas from approved GA4GH products such as Phenopackets and the Variant Representation Standard (VRS).","title":"Integration with External Standards"},{"location":"formats-standards/#variant-representation-standard-vrs","text":"The GA4GH Variant Representation Standard (VRS) constitutes the reference one should use when implementing representations of genomic variations. The current version 1.2 has been approved and covers a set of use cases and requirements, especially with respect to genomic (including cytogenetic or feature based) locations. However, it is not yet suitable for a number of practical use cases, especially the representation of some structural variations. The Beacon v2 default model for GenomicVariation makes use of the VRS standard to represent the variation part, i.e. the location and sequence or copy number changes of the genomic variation. While a \"legacy\" alternative is still allowed this one too has been adjusted to make use of the VRS Location format.","title":"Variant Representation Standard (VRS)"},{"location":"formats-standards/#phenopackets","text":"In the Beacon v2 default data model, many schemas are either directly compatible to Phenopackets v2 building blocks or at least reflect them but with some adjustments. While the Beacon v2 default model's schemas do not per se have to reflect PXF schemas, we target an as-close-as-possible alignment to promote/leverage GA4GH-wide standardization.","title":"Phenopackets"},{"location":"framework/","text":"Beacon v2 Framework \u00b6 Introduction \u00b6 The GA4GH Beacon specification is composed by two parts: the Beacon Framework the Beacon Models The Beacon Framework is the part that describes the overall structure of the API requests, responses, parameters, the common components, etc. It could also be referred in this document as simply the Framework . A Beacon Model describes the set of concepts included in a Beacon version (e.g. Beacon v2), like individual or biosample . It could also be referred in this document as simply the Model . The Framework could be considered the syntax and the Model as the semantics . Refer to the Models for further information about the default model and how to use it. The Framework doesn't include anything related to specific entities but only the mechanisms for querying them and parsing the responses. The BF is, therefore, independent from/agnostic to any specific Model. It can be leveraged to describe models from other domains like proteomics, imaging, biobanking, etc. A Beacon instance is just an implementation of a Beacon Model that follows the rules stated by the Beacon Framework. If you are a Beacon implementer, then, you don't need to clone this (Framework) repo, you only need to copy ( or clone ) the Beacon Model and modify it to your specific instance. You will find plenty of references to the Framework in the Model copy, and you will use the Json schemas in the Framework to validate that both the structure of your requests and responses are compliant with the Beacon Framework. The Beacon verifier tool would help in such validation. The Framework repo includes the elements that are common to all Beacons: The configuration files The Json schemas for the requests, the responses, and its respective sections The files of every Beacon root Examples of all the above (using a fake and simple Model) Coding and naming conventions \u00b6 Please visit the Standards Page Folder structure in the framework repo \u00b6 The above listed elements are organized in several folders ( in alphabetical order ): common: Json schemas and examples of the components used in other parts of the specification. configuration: Json schemas and examples for the configuration files that every Beacon MUST implement. requests: Json schemas and examples for the different sections of a request. responses: Json schemas and examples for the different types of responses and response sections. root folder: It only includes the definition of the Beacon root endpoints. The root folder and the Beacon root endpoints \u00b6 The root folder only contains the endpoints.json document, an OpenAPI 3.0.2 description of the endpoints that every Beacon instance MUST implement. The endpoints are: * the root ( / ) and /info that MUST return information (metadata) about the Beacon service and the organization supporting it. * the /service-info endpoint that returns the Beacon metadata in the GA4GH Service Info schema. * the /configuration endpoint that returns some configuration aspects and the definition of the entry types (e.g. genomic variants , biosamples , cohorts ) implemented in that specific Beacon server or instance. * the /entry_types endpoints that only return the section of the configuration that describes the entry types in that Beacon. * the /map endpoint that returns a map (like a web sitemap ) of the different endpoints implemented in that Beacon instance. * the /filtering_terms endpoint that returns a list of the filtering terms accepted by that Beacon instance. Most of these endpoints simply return the configuration files that are in the Beacon configuration folder. Of course, every Beacon instance would have their particular instance of such documents, including the configuration of such instance. Note: It could be argued that the Beacon configuration files are different for every Beacon instance and, hence, they should be part of the Model. However, the configuration files MUST be used, exactly with the same schema, by any model, independently if that Beacon follows the Beacon v2 Model or any other. Additionally, these endpoints and configuration files are critical for a Beacon client to be able to understand and use a Beacon instance. Therefore, we have considered it to be an essential part of the Framework and belonging to it. The Configuration \u00b6 Contains the Json schema files that describe the Beacon configuration, its contents are described in the section above, as they have almost a 1-to-1 relationship with such endpoints. Further details about the specific content of each file could be find in the corresponding sections below. The Requests \u00b6 Contains the following Json schemas: beaconRequestBody.json: Schema for the whole Beacon request. It is named RequestBody to keep the same nomenclature used by OpenAPI v3, but it actually contains the definition of the whole HTTP POST request payload. beaconRequestMeta.json: Meta section of the Beacon request. It includes request context details relevant for the Beacon server when processing the request, like the Beacon API version used to format the request or the schemas expected for the entry types in the response. filteringTerms.json: defines the schema for the filters included in the request. requestParameters.json defines the, very free, schema of the parameters included in the request. examples-fullDocuments folder: includes examples of \"actual\" requests. The example labelled with MIN in the name shows the minimal required attributes for the request to be compliant. The example labelled with MAX in the name includes a richer case with all the sections filled in. examples-sections folder: includes examples of \"actual\" sections of the requests. It is included to allow specification designers and Beacon implementers to check the compliance with a single section instead of having to implement a whole request. Such way, We aim to facilitate an \"incremental\" implementation of an instance. Differences between FilteringTerms and RequestParameters \u00b6 Both, the filters ( filteringTerms ) and the parameters ( requestParameters ), are used to refine the query. The availability of two mechanisms to refine the queries could sound initially confusing, but that separation is taylored to facilitate the interpretation of the request by the Beacon server. An basic difference is that, in HTTP GET requests, each parameters is named (e.g. 'id', 'skip','limit') while filters go under the same named parameter 'filters'. For HTTP POST requests, the difference relays on paramaters having each one a separate definition (e.g. id is a string , while skip is an integer ), while all filters follow the schema described in /requests/filteringTerms.json . An unrestricted query like /datasets should return the list of all datasets in a Beacon instance. That query could be refined by adding a generic condition like: \"return only datasets which could be used for 'general research'\" or \"return only the first 10 datasets\". The former belong to the filter category, the latter to the parameters. If you are a beacon implementer, a rule of thumb could be: anything that requires its own schema would be a request parameter anything that could be represented by an ontology term would go into the filters section. anything else would probably be a request parameter. The Responses \u00b6 The Beacon concept includes several types of responses: some informative or informational and some with actual data payloads, and the error one. The Informational responses \u00b6 A Beacon is able to return information, details, about itself. Many of the schema responses included in the responses folder have a 1-to-1 relationship with the corresponding configuration documents and their equivalent root endpoints, e.g. the beaconEntryTypeResponse.json is the schema of a response that wraps the beaconConfiguration.json document, and is then used as the payload of the /entry_types root endpoint. Schematically: * configuration/an_schema.json : describes the schema of the configuration file itself. * responses/an_schema_response.json : describes the format of the response that returns these configuration information. * root/endpoints.json : describes the API endpoints to be called and parameters to be used to retrieve such responses. The following schemas refer to informational responses: beaconConfigurationResponse , beaconEntryTypeResponse , beaconFilteringTermsResponse , \u00e2nd beaconMapResponse . The results responses \u00b6 A Beacon could return responses at different granularity levels: boolean response: only returns exists: true ('Yes') or exists: false ('No') to a given query. count response: returns Yes / No and the number of matching results. resultset response: returns Yes / No , the number of matching results and details of them per every collection (e.g. every dataset or cohort) and, if granted, details on every record that matches the query. Each of these granularity levels has an equivalent response schema: boolean : beaconBooleanResponse count : beaconCountResponse resultset (with or w/o record details): beaconResultSetsResponse An additional schema, beaconCollectionsResponse , describes such responses that returns details about the collections in a Beacon, but not the collection content themselves. Otherwise said, the response describes a dataset, but not returns the contents of any dataset. The common components \u00b6 Some elements are transerval to the Framework and to any model, e.g. the schema for describing an ontology term or the reference to an external schema (like the reference to GA4GH Phenopackets or GA4GH Service Info schemas). Testing the compliance of an implementation with testMode \u00b6 Given that the flexibility allowed in the implentation of each Beacon instance, and the security restrictions that could apply (e.g. only answering after authentication of the user), a mechanism is required for allowing testing the compliance of a Beacon. A first step in this compliance testing is done by the implementer by checking that received requests are correct and that the generated responses match the provided schemas. However, an external compliance testing is desirable when the Beacon instance plans to be integrated in a network or to engage in dialogs with a diversity of clients. For this second scenario, the testMode parameter was included. A Beacon instance could receive a request with the testMode parameter activated (value= true ) in which case the Beacon MUST respond, with actual or fake contents, using the response format and skipping any user authentication. The fact that a response has been generated for testing purposes is included in the meta section of the response. The Beacon Configuration file \u00b6 The file /configuration/beaconConfiguration.json defines the schema (in Json schema draft-07) of the Json file that includes core aspects of a Beacon instance configuration. The schema includes four sections: $schema: that MUST BE a reference to a schema. In the Models, the instances of that file will point to this file . Having the schema allows verifying that the document is compliant with it. maturityAttributes: Declares the level of maturity of the Beacon instance. Available values are: DEV: Service potentially unstable, not using real data, which availability and data should not be used in production setups. TEST: The service is expected to be stable, meaning up and available, but does not include real data to be trusted for real world queries. PROD: Service stable, at production level standards, containing actual data. Except when testing, most of the Beacon queries are expected to be answered by 'PROD' Beacons. securityAttributes: Configuration of the security aspects of the Beacon. By default, a Beacon that does not declare the configuration settings would return boolean (true/false) responses, and only if the user is authenticated and explicitly authorized to access the Beacon resources. Although this is the safest set of settings, it is not recommended unless the Beacon shares very sensitive information. Non sensitive Beacons should preferably opt for a record and PUBLIC combination. defaultGranularity: Default granularity of the responses. Some responses could return higher detail, but this would be the granularity by default. securityLevels: All access levels supported by the Beacon. Any combination is valid, as every option would apply to different parts of the Beacon. Available options are: Granularity Description boolean returns 'true/false' responses. count adds the total number of positive results found. aggregated returns summary, aggregated or distribution like responses per collection. record returns details for every row. For those cases where a Beacon prefers to return records with less, not all, attributes, different strategies have been considered, e.g.: keep non-mandatory attributes empty, or Beacon to provide a minimal record definition, but these strategies still need to be tested in real world cases and hence no design decision has been taken yet. security level description PUBLIC Any anonymous user can read the data REGISTERED Only known users can read the data CONTROLLED Only specificly granted users can read the data Example \u00b6 \"maturityAttributes\" : { \"productionStatus\" : \"DEV\" }, \"securityAttributes\" : { \"defaultGranularity\" : \"boolean\" , \"securityLevels\" : [ \"PUBLIC\" , \"REGISTERED\" , \"CONTROLLED\" ] } The Beacon in the example is in development status, returns boolean answers by default, and has queries available in any of the access levels.","title":"Framework"},{"location":"framework/#introduction","text":"The GA4GH Beacon specification is composed by two parts: the Beacon Framework the Beacon Models The Beacon Framework is the part that describes the overall structure of the API requests, responses, parameters, the common components, etc. It could also be referred in this document as simply the Framework . A Beacon Model describes the set of concepts included in a Beacon version (e.g. Beacon v2), like individual or biosample . It could also be referred in this document as simply the Model . The Framework could be considered the syntax and the Model as the semantics . Refer to the Models for further information about the default model and how to use it. The Framework doesn't include anything related to specific entities but only the mechanisms for querying them and parsing the responses. The BF is, therefore, independent from/agnostic to any specific Model. It can be leveraged to describe models from other domains like proteomics, imaging, biobanking, etc. A Beacon instance is just an implementation of a Beacon Model that follows the rules stated by the Beacon Framework. If you are a Beacon implementer, then, you don't need to clone this (Framework) repo, you only need to copy ( or clone ) the Beacon Model and modify it to your specific instance. You will find plenty of references to the Framework in the Model copy, and you will use the Json schemas in the Framework to validate that both the structure of your requests and responses are compliant with the Beacon Framework. The Beacon verifier tool would help in such validation. The Framework repo includes the elements that are common to all Beacons: The configuration files The Json schemas for the requests, the responses, and its respective sections The files of every Beacon root Examples of all the above (using a fake and simple Model)","title":"Introduction"},{"location":"framework/#coding-and-naming-conventions","text":"Please visit the Standards Page","title":"Coding and naming conventions"},{"location":"framework/#folder-structure-in-the-framework-repo","text":"The above listed elements are organized in several folders ( in alphabetical order ): common: Json schemas and examples of the components used in other parts of the specification. configuration: Json schemas and examples for the configuration files that every Beacon MUST implement. requests: Json schemas and examples for the different sections of a request. responses: Json schemas and examples for the different types of responses and response sections. root folder: It only includes the definition of the Beacon root endpoints.","title":"Folder structure in the framework repo"},{"location":"framework/#the-root-folder-and-the-beacon-root-endpoints","text":"The root folder only contains the endpoints.json document, an OpenAPI 3.0.2 description of the endpoints that every Beacon instance MUST implement. The endpoints are: * the root ( / ) and /info that MUST return information (metadata) about the Beacon service and the organization supporting it. * the /service-info endpoint that returns the Beacon metadata in the GA4GH Service Info schema. * the /configuration endpoint that returns some configuration aspects and the definition of the entry types (e.g. genomic variants , biosamples , cohorts ) implemented in that specific Beacon server or instance. * the /entry_types endpoints that only return the section of the configuration that describes the entry types in that Beacon. * the /map endpoint that returns a map (like a web sitemap ) of the different endpoints implemented in that Beacon instance. * the /filtering_terms endpoint that returns a list of the filtering terms accepted by that Beacon instance. Most of these endpoints simply return the configuration files that are in the Beacon configuration folder. Of course, every Beacon instance would have their particular instance of such documents, including the configuration of such instance. Note: It could be argued that the Beacon configuration files are different for every Beacon instance and, hence, they should be part of the Model. However, the configuration files MUST be used, exactly with the same schema, by any model, independently if that Beacon follows the Beacon v2 Model or any other. Additionally, these endpoints and configuration files are critical for a Beacon client to be able to understand and use a Beacon instance. Therefore, we have considered it to be an essential part of the Framework and belonging to it.","title":"The root folder and the Beacon root endpoints"},{"location":"framework/#the-configuration","text":"Contains the Json schema files that describe the Beacon configuration, its contents are described in the section above, as they have almost a 1-to-1 relationship with such endpoints. Further details about the specific content of each file could be find in the corresponding sections below.","title":"The Configuration"},{"location":"framework/#the-requests","text":"Contains the following Json schemas: beaconRequestBody.json: Schema for the whole Beacon request. It is named RequestBody to keep the same nomenclature used by OpenAPI v3, but it actually contains the definition of the whole HTTP POST request payload. beaconRequestMeta.json: Meta section of the Beacon request. It includes request context details relevant for the Beacon server when processing the request, like the Beacon API version used to format the request or the schemas expected for the entry types in the response. filteringTerms.json: defines the schema for the filters included in the request. requestParameters.json defines the, very free, schema of the parameters included in the request. examples-fullDocuments folder: includes examples of \"actual\" requests. The example labelled with MIN in the name shows the minimal required attributes for the request to be compliant. The example labelled with MAX in the name includes a richer case with all the sections filled in. examples-sections folder: includes examples of \"actual\" sections of the requests. It is included to allow specification designers and Beacon implementers to check the compliance with a single section instead of having to implement a whole request. Such way, We aim to facilitate an \"incremental\" implementation of an instance.","title":"The Requests"},{"location":"framework/#the-responses","text":"The Beacon concept includes several types of responses: some informative or informational and some with actual data payloads, and the error one.","title":"The Responses"},{"location":"framework/#the-common-components","text":"Some elements are transerval to the Framework and to any model, e.g. the schema for describing an ontology term or the reference to an external schema (like the reference to GA4GH Phenopackets or GA4GH Service Info schemas).","title":"The common components"},{"location":"framework/#testing-the-compliance-of-an-implementation-with-testmode","text":"Given that the flexibility allowed in the implentation of each Beacon instance, and the security restrictions that could apply (e.g. only answering after authentication of the user), a mechanism is required for allowing testing the compliance of a Beacon. A first step in this compliance testing is done by the implementer by checking that received requests are correct and that the generated responses match the provided schemas. However, an external compliance testing is desirable when the Beacon instance plans to be integrated in a network or to engage in dialogs with a diversity of clients. For this second scenario, the testMode parameter was included. A Beacon instance could receive a request with the testMode parameter activated (value= true ) in which case the Beacon MUST respond, with actual or fake contents, using the response format and skipping any user authentication. The fact that a response has been generated for testing purposes is included in the meta section of the response.","title":"Testing the compliance of an implementation with testMode"},{"location":"framework/#the-beacon-configuration-file","text":"The file /configuration/beaconConfiguration.json defines the schema (in Json schema draft-07) of the Json file that includes core aspects of a Beacon instance configuration. The schema includes four sections: $schema: that MUST BE a reference to a schema. In the Models, the instances of that file will point to this file . Having the schema allows verifying that the document is compliant with it. maturityAttributes: Declares the level of maturity of the Beacon instance. Available values are: DEV: Service potentially unstable, not using real data, which availability and data should not be used in production setups. TEST: The service is expected to be stable, meaning up and available, but does not include real data to be trusted for real world queries. PROD: Service stable, at production level standards, containing actual data. Except when testing, most of the Beacon queries are expected to be answered by 'PROD' Beacons. securityAttributes: Configuration of the security aspects of the Beacon. By default, a Beacon that does not declare the configuration settings would return boolean (true/false) responses, and only if the user is authenticated and explicitly authorized to access the Beacon resources. Although this is the safest set of settings, it is not recommended unless the Beacon shares very sensitive information. Non sensitive Beacons should preferably opt for a record and PUBLIC combination. defaultGranularity: Default granularity of the responses. Some responses could return higher detail, but this would be the granularity by default. securityLevels: All access levels supported by the Beacon. Any combination is valid, as every option would apply to different parts of the Beacon. Available options are: Granularity Description boolean returns 'true/false' responses. count adds the total number of positive results found. aggregated returns summary, aggregated or distribution like responses per collection. record returns details for every row. For those cases where a Beacon prefers to return records with less, not all, attributes, different strategies have been considered, e.g.: keep non-mandatory attributes empty, or Beacon to provide a minimal record definition, but these strategies still need to be tested in real world cases and hence no design decision has been taken yet. security level description PUBLIC Any anonymous user can read the data REGISTERED Only known users can read the data CONTROLLED Only specificly granted users can read the data","title":"The Beacon Configuration file"},{"location":"implementations-options/","text":"Important As previously described, Beacon v2 is an specification for sharing/discovery of data. Thus, a priori , it has nothing to do with any particular software, database or computer language. Which are the implementation options? \u00b6 Two elements are needed to implement (or \"light\") a Beacon v2: An internal database (where the biological data are stored). A REST API that provides a standardized way to send queries and receive responses (containing yes/no, counts or data). In this section we are going to present three implementation options, going from no involvement/delegate to CRG software to full delegate to CRG software. Option A \u00b6 Let's say that you have your data organized and structured in a database (e.g. SQL or NoSQL which may or may not have an internal layer to get access to it). Let's also say that you have the resources (and knowledge) to read the \"instructions\" (i.e., Beacon v2 specification) to build an API on top of your existing solution. If that's your case, then this is the option for you. You are one of what we call Beacon v2 API implementers . We have a few of them already in the Beacon v2 Service Registry : European Genome-Phenome Archive Beacon Cafe Variome Progenetix Beacon+ Fundacion Progreso y Salud Beacon v2 API CNAG Beacon v2 API Option B \u00b6 Let's say that you have a solution to organize your data but you don't have the resources (or knowledge) to implement a Beacon v2 API yourself. In some pilot studies, CRG has been helping individual institutions to build their Beacon v2 API. However, this option is not practical and does not scalate well so you may want to check Option C . Option C \u00b6 Let's say that you have your data somewhat structured (you may have Excel files, PDFs, VCFs... or maybe a SQL database, or an EHR solution with phenoclinic information). You want to \"beaconize\" your data to be part of a larger ecosystem, but you're unsure where to start, and/or don't want to invest a lot of resources because you are still unsure if the whole thing will pay off. Well, you're a not alone! Most centers are in this situation. For that reason at CRG we developed the Beacon v2 Reference Implementation . Important People that download and install B2RI are named Beacon v2 deployers .","title":"Implementations Options"},{"location":"implementations-options/#option-a","text":"Let's say that you have your data organized and structured in a database (e.g. SQL or NoSQL which may or may not have an internal layer to get access to it). Let's also say that you have the resources (and knowledge) to read the \"instructions\" (i.e., Beacon v2 specification) to build an API on top of your existing solution. If that's your case, then this is the option for you. You are one of what we call Beacon v2 API implementers . We have a few of them already in the Beacon v2 Service Registry : European Genome-Phenome Archive Beacon Cafe Variome Progenetix Beacon+ Fundacion Progreso y Salud Beacon v2 API CNAG Beacon v2 API","title":"Option A"},{"location":"implementations-options/#option-b","text":"Let's say that you have a solution to organize your data but you don't have the resources (or knowledge) to implement a Beacon v2 API yourself. In some pilot studies, CRG has been helping individual institutions to build their Beacon v2 API. However, this option is not practical and does not scalate well so you may want to check Option C .","title":"Option B"},{"location":"implementations-options/#option-c","text":"Let's say that you have your data somewhat structured (you may have Excel files, PDFs, VCFs... or maybe a SQL database, or an EHR solution with phenoclinic information). You want to \"beaconize\" your data to be part of a larger ecosystem, but you're unsure where to start, and/or don't want to invest a lot of resources because you are still unsure if the whole thing will pay off. Well, you're a not alone! Most centers are in this situation. For that reason at CRG we developed the Beacon v2 Reference Implementation . Important People that download and install B2RI are named Beacon v2 deployers .","title":"Option C"},{"location":"models/","text":"beacon-v2-Models \u00b6 Introduction \u00b6 The GA4GH Beacon specification is composed by two parts: the Beacon Framework the Beacon Models The Beacon Framework (in Framework repo ) is the part that describes the overall structure of the API requests, responses, parameters, the common components, etc. It could also be referred in this document as simply the Framework . Beacon Models (in the Models repo ) describes the set of concepts included in a Beacon version (e.g. Beacon v2), like individual or biosample , and also the relationships between them. It could also be referred in this document as simply the Model . The Framework could be considered the syntax and the Model as the semantics . Refer to the Framework for further information about the Framework and its parts. A beacon instance is just an implementation of a Beacon Model that follows the rules stated by the Beacon Framework. Beacon default model vs. beacon instances While the Beacon default model provides templates for responses and formats for uniform data delivery - especially for networked beacons - it does not prescribe how data should be organised in individual instances or what schemas should be used for local storage. If you are a Beacon implementer, then, you don't need to clone the Framework repo, you only need to copy ( or clone ) the Beacon Model and modify it to your specific case. You will find plenty of references to the Framework in the Model copy, and you will use the Json schemas there to validate that both the structure of your requests and responses are compliant with the Beacon Framework. The Framewrok is not used to check the schema in the responses payload (e.g. the actual details of a biosample of a cohort). The schemas for that are included in the Model that you should have copied. classDiagram analyses < -- genomicVariations : 1..n runs < -- analyses : 1..n biosamples < -- runs : 1..n individuals < -- biosamples : 1..n runs < .. genomicVariations : 1..n biosamples < .. genomicVariations : 1..n individuals < .. genomicVariations : 1..n biosamples < .. analyses : 1..n individuals < .. analyses : 1..n individuals < .. runs : 1..n cohorts o-- individuals : 1..n datasets o-- genomicVariations : 1..n class genomicVariations{ analysisId runId biosampleId individualId variation clinicalInterpretations caseLevelData ... } class analyses{ id runId biosampleId individualId analysisDate pipelineName aligner ... } class biosamples{ id individualId biosampleStatus sampleOriginType histologicalDiagnosis collectionDate ... } class individuals{ id sex diseases phenotypicFeatures ethnicity pedigrees ... } class runs{ id biosampleId individualId runDate librarySource libraryStrategy platform ... } class datasets{ id name description dataUseCondition info updateDateTime ... } class cohorts{ id name cohortType cohortSize cohortDataTypes cohortDesign ... } Beacon v2 Models entities and their relationships The above entities are defined as follows; Collections ( Datasets and Cohorts ): groupings of variants or individuals that share something in common: e.g., who belong to the same repository (datasets) or study population (cohorts). Genomic variations : unique genomic alterations, e.g., position in a genome, sequence alterations, type, etc. Individuals : either patients or healthy controls whose details (including phenotypic and clinical) are stored in the repository. Biosamples : samples taken from individuals, including details of procedures, dates and times. Analyses & Runs : details on (a) procedures used for sequencing a biosample (runs), and (b) bioinformatic procedures to identify variants (analyses) Beacon v1 Model: Repo Provided as an example for Beacon v1 implementers that want to update to Beacon v2 but not planning to add any additional entry type to their Beacon.","title":"Introduction"},{"location":"models/#introduction","text":"The GA4GH Beacon specification is composed by two parts: the Beacon Framework the Beacon Models The Beacon Framework (in Framework repo ) is the part that describes the overall structure of the API requests, responses, parameters, the common components, etc. It could also be referred in this document as simply the Framework . Beacon Models (in the Models repo ) describes the set of concepts included in a Beacon version (e.g. Beacon v2), like individual or biosample , and also the relationships between them. It could also be referred in this document as simply the Model . The Framework could be considered the syntax and the Model as the semantics . Refer to the Framework for further information about the Framework and its parts. A beacon instance is just an implementation of a Beacon Model that follows the rules stated by the Beacon Framework. Beacon default model vs. beacon instances While the Beacon default model provides templates for responses and formats for uniform data delivery - especially for networked beacons - it does not prescribe how data should be organised in individual instances or what schemas should be used for local storage. If you are a Beacon implementer, then, you don't need to clone the Framework repo, you only need to copy ( or clone ) the Beacon Model and modify it to your specific case. You will find plenty of references to the Framework in the Model copy, and you will use the Json schemas there to validate that both the structure of your requests and responses are compliant with the Beacon Framework. The Framewrok is not used to check the schema in the responses payload (e.g. the actual details of a biosample of a cohort). The schemas for that are included in the Model that you should have copied. classDiagram analyses < -- genomicVariations : 1..n runs < -- analyses : 1..n biosamples < -- runs : 1..n individuals < -- biosamples : 1..n runs < .. genomicVariations : 1..n biosamples < .. genomicVariations : 1..n individuals < .. genomicVariations : 1..n biosamples < .. analyses : 1..n individuals < .. analyses : 1..n individuals < .. runs : 1..n cohorts o-- individuals : 1..n datasets o-- genomicVariations : 1..n class genomicVariations{ analysisId runId biosampleId individualId variation clinicalInterpretations caseLevelData ... } class analyses{ id runId biosampleId individualId analysisDate pipelineName aligner ... } class biosamples{ id individualId biosampleStatus sampleOriginType histologicalDiagnosis collectionDate ... } class individuals{ id sex diseases phenotypicFeatures ethnicity pedigrees ... } class runs{ id biosampleId individualId runDate librarySource libraryStrategy platform ... } class datasets{ id name description dataUseCondition info updateDateTime ... } class cohorts{ id name cohortType cohortSize cohortDataTypes cohortDesign ... } Beacon v2 Models entities and their relationships The above entities are defined as follows; Collections ( Datasets and Cohorts ): groupings of variants or individuals that share something in common: e.g., who belong to the same repository (datasets) or study population (cohorts). Genomic variations : unique genomic alterations, e.g., position in a genome, sequence alterations, type, etc. Individuals : either patients or healthy controls whose details (including phenotypic and clinical) are stored in the repository. Biosamples : samples taken from individuals, including details of procedures, dates and times. Analyses & Runs : details on (a) procedures used for sequencing a biosample (runs), and (b) bioinformatic procedures to identify variants (analyses) Beacon v1 Model: Repo Provided as an example for Beacon v1 implementers that want to update to Beacon v2 but not planning to add any additional entry type to their Beacon.","title":"Introduction"},{"location":"networks/","text":"Beacon Networks \u00b6 Many Beacon instances will be part of networks, although a Beacon can be instantiated as stand-alone solution. The Beacon design includes several features aimed to be consumed by Beacon network aggregators. For example, a Beacon endpoint declares which entities are implemented in that particular instance, which are the ontology terms supported or the URL endpoints where different elements could be found. Beacon v2 Networks With the finalization of the Beacon v2 protocol we will son provide information about Beacon v2 network implementations.","title":"Networks"},{"location":"other-implementations/","text":"Registry Server \u00b6 The Beacon registry server, hosted through the European Genome-Phenome Archive, monitors a number of implementations of the Beacon v2 protocol by various organisations actively involved in Beacon protocol development. Link: Beacon v2 GA4GH Approval Registry \u00b6 Example Implementations \u00b6 Progenetix API \u00b6 The Progenetix database and cancer genomic information resource contains genome profiles of more than 140000 individual cancer genome screening experiments, with the majority representing results from genomic copy number assessment studies. With its Beacon + forward-looking test implementation, since 2016 Progenetix has been developing concepts for Beacon protocol extensions such as CNV query options or handover data delivery. Technologies \u00b6 MongoDB backend bycon Python-based full stack API / middleware progenetix-web React based front-end (modular for Beacon instances as well as the whole Progenetix UI) Link: Documentation page for Progenetix REST paths \u00b6 Cafe Variome \u00b6 Link: Cafe Variome \u00b6 CNAG Beacon v2 API \u00b6 Link: CNAG Beacon v2 API \u00b6 Fundacion Progreso y Salud Beacon v2 API \u00b6 Link: Fundacion Progreso y Salud Beacon v2 API \u00b6 Tips for New Implementers \u00b6 Find below some tips to get you started: Start with a boolean beacon. List your available endpoints . Map the data from your DB to the Models . Handle the different types of filters and request parameters . Build a response following the Framework .","title":"Others"},{"location":"other-implementations/#registry-server","text":"The Beacon registry server, hosted through the European Genome-Phenome Archive, monitors a number of implementations of the Beacon v2 protocol by various organisations actively involved in Beacon protocol development.","title":"Registry Server"},{"location":"other-implementations/#example-implementations","text":"","title":"Example Implementations"},{"location":"other-implementations/#progenetix-api","text":"The Progenetix database and cancer genomic information resource contains genome profiles of more than 140000 individual cancer genome screening experiments, with the majority representing results from genomic copy number assessment studies. With its Beacon + forward-looking test implementation, since 2016 Progenetix has been developing concepts for Beacon protocol extensions such as CNV query options or handover data delivery.","title":"Progenetix API"},{"location":"other-implementations/#cafe-variome","text":"","title":"Cafe Variome"},{"location":"other-implementations/#cnag-beacon-v2-api","text":"","title":"CNAG Beacon v2 API"},{"location":"other-implementations/#fundacion-progreso-y-salud-beacon-v2-api","text":"","title":"Fundacion Progreso y Salud Beacon v2 API"},{"location":"other-implementations/#tips-for-new-implementers","text":"Find below some tips to get you started: Start with a boolean beacon. List your available endpoints . Map the data from your DB to the Models . Handle the different types of filters and request parameters . Build a response following the Framework .","title":"Tips for New Implementers"},{"location":"rest-api/","text":"Beacon REST API \u00b6 While the full power of the Beacon API can be unlocked through the use of structured queries using JSON serialization (\"POST\" requests), the majority of common queries can be implemented through standard query URLs with parameters (GET queries). Beacon API URL structure \u00b6 Beacon REST paths in general follow the format __APIroot__/__entryType__/{id}/ or __APIroot__/__entryType__/{id}/__requestedSchema__ A typical example would e.g. the request to retrieve all genomic variants associated with a biosample https://example.com/beacon/api/biosamples/bios-st4582/g_variants REST Endpoint Definitions The endpoind paths available for a given Beacon instance are defined in __APIroot__/beaconMap/ Github POST requests \u00b6 In POST requests queries and metadata are defined in JSON objects as specified in the model supported by the Beacon instance. For more information see the requests documentation the models GET queries \u00b6 By default the Beacon model supports a limited set of query parameters, most notably such addressing genomic variations. Examples can be found in the Genomic Queries documentation and in the requests section of the default model. List parameters in GET queries \u00b6 Several of the common query parameters have a multiple value option, i.e. are assumed to be lists. A typical use case here would be the construction of Bracket Queries which use 2 of each start and end values. Use a comma , separator for list values in GET Due to the problem of some web frameworks with the interpretation of multiple values for the same parameter we recommend the consistant use of a single parameter name and comma-concatenated values. &start=1234000&start=5234000 &start=1234000,5234000","title":"REST API"},{"location":"rest-api/#beacon-api-url-structure","text":"Beacon REST paths in general follow the format __APIroot__/__entryType__/{id}/ or __APIroot__/__entryType__/{id}/__requestedSchema__ A typical example would e.g. the request to retrieve all genomic variants associated with a biosample https://example.com/beacon/api/biosamples/bios-st4582/g_variants REST Endpoint Definitions The endpoind paths available for a given Beacon instance are defined in __APIroot__/beaconMap/ Github","title":"Beacon API URL structure"},{"location":"rest-api/#post-requests","text":"In POST requests queries and metadata are defined in JSON objects as specified in the model supported by the Beacon instance. For more information see the requests documentation the models","title":"POST requests"},{"location":"rest-api/#get-queries","text":"By default the Beacon model supports a limited set of query parameters, most notably such addressing genomic variations. Examples can be found in the Genomic Queries documentation and in the requests section of the default model.","title":"GET queries"},{"location":"rest-api/#list-parameters-in-get-queries","text":"Several of the common query parameters have a multiple value option, i.e. are assumed to be lists. A typical use case here would be the construction of Bracket Queries which use 2 of each start and end values. Use a comma , separator for list values in GET Due to the problem of some web frameworks with the interpretation of multiple values for the same parameter we recommend the consistant use of a single parameter name and comma-concatenated values. &start=1234000&start=5234000 &start=1234000,5234000","title":"List parameters in GET queries"},{"location":"security/","text":"Security \u00b6 Disclaimer A stand-alone regulatory and ethics review has been performed on the specification itself, however, it is the responsibility of the implementer to ensure that appropriate measures are taken to remove risks related to privacy, confidentiality, and/or security of data. The Beacon uses a 3-tiered access model: anonymous , registered , and controlled access . Technical Notes For detailed information about the technical implementation of the different levels of security please see the Framework documentation. Registered \u00b6 For a Beacon to respond to a query at the registered tier, the user must identify themselves to the Beacon, for example by using an ELIXIR identity . Controlled \u00b6 For a Beacon to respond to a controlled access query, the user must have applied for, and been granted access to, the Beacon (or data derived from one or more individuals within the Beacon) individuals) whose data is only accessible at specified tiers within the Beacon. This tiered access model allows the owner or controller of a Beacon to determine which responses are returned to whom depending on the query and the user who is making the request, for example to ensure the response respects the consent under which the data were collected. Anonymous \u00b6 Anonymous Beacon can be accessed by any request. Synthetic data The use of synthetic data for testing is important in that it ensures that the full functionality of a Beacon can be tested and / or demonstrated without risk of exposing data from individuals. In addition to testing or demonstrating a deployment, synthetic data should be used for development, for example adding new features.","title":"Security"},{"location":"security/#registered","text":"For a Beacon to respond to a query at the registered tier, the user must identify themselves to the Beacon, for example by using an ELIXIR identity .","title":"Registered"},{"location":"security/#controlled","text":"For a Beacon to respond to a controlled access query, the user must have applied for, and been granted access to, the Beacon (or data derived from one or more individuals within the Beacon) individuals) whose data is only accessible at specified tiers within the Beacon. This tiered access model allows the owner or controller of a Beacon to determine which responses are returned to whom depending on the query and the user who is making the request, for example to ensure the response respects the consent under which the data were collected.","title":"Controlled"},{"location":"security/#anonymous","text":"Anonymous Beacon can be accessed by any request. Synthetic data The use of synthetic data for testing is important in that it ensures that the full functionality of a Beacon can be tested and / or demonstrated without risk of exposing data from individuals. In addition to testing or demonstrating a deployment, synthetic data should be used for development, for example adding new features.","title":"Anonymous"},{"location":"variant-queries/","text":"Genomic Variant Queries \u00b6 For querying of genomic variations Beacon v2 builds on and extends the options provided by earlier versions. Beacon Sequence Queries \u00b6 Sequence Queries query for the existence of a specified sequence at a given genomic position. Such queries correspond to the original Beacon queries and are used to match short, precisely defined genomic variants such as SNVs and INDELs. Parameters \u00b6 referenceName start (single value) alternateBases referenceBases Example: EIF4A1 Single Base Mutation \u00b6 This is an example for a single base mutation ( G>A ) at a specific position (GRCh38 chromosome 17 7577120 ) in the EIF4A1 eukaryotic translation initiation factor 4A1. Beacon v2 GET Beacon v2 POST Beacon v1 Beacon v0.3 ?referenceName=NC_000017.11&start=7577120&referenceBases=G&alternateBases=A Optional \u00b6 datasetIds=__some-dataset-ids__ filters ... { \"$schema\":\"beaconRequestBody.json\", \"meta\": { \"apiVersion\": \"2.0\", \"requestedSchemas\": [ { \"entityType\": \"genomicVariation\", \"schema:\": \"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/models/json/beacon-v2-default-model/genomicVariations/defaultSchema.json\" } ] }, \"query\": { \"requestParameters\": { \"referenceName\": \"NC_000017.11\", \"start\": [7577120], \"referenceBases\": \"G\", \"alternateBases\": \"A\" } }, \"requestedGranularity\": \"record\", \"pagination\": { \"skip\": 0, \"limit\": 5 } } There are optional parameters [ datasetIds , filters ...] and also the option to specify the response type (through requestedGranularity ) and returned data format ( requestedSchemas ). Please follow this up in the framework documentation . ?assemblyId=GRCh38&referenceName=17&start=7577120&referenceBases=G&alternateBases=A Optional \u00b6 datasetIds=__some-dataset-ids__ ?ref=GRCh38&chrom=17&pos=7577121&referenceAllele=C&allele=A Optional \u00b6 beacon=__some-beacon-id__ Before Beacon v0.4 a 1-based coordinate system was being used. Beacon Range Queries \u00b6 Beacon Range Queries are supposed to return matches of any variant with at least partial overlap of the sequence range specified by reference_name , start and end parameters. Parameters \u00b6 referenceName start ( single value) end ( single value) optional variantType OR alternateBases OR aminoacidChange variantMinLength variantMaxLength Use of start and end Range queries require the use of single start and end parameters, in contrast to Bracket Queries . Example: Any variant affecting EIF4A1 \u00b6 Beacon v2 GET Beacon v2 POST Beacon v1 Beacon v0.3 ?assemblyId=GRCh38&referenceName=17&start=7572837&end=7578641 { \"$schema\":\"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/framework/json/requests/beaconRequestBody.json\", \"meta\": { \"apiVersion\": \"2.0\", \"requestedSchemas\": [ { \"entityType\": \"genomicVariation\", \"schema:\": \"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/models/json/beacon-v2-default-model/genomicVariations/defaultSchema.json\" } ] }, \"query\": { \"requestParameters\": { \"referenceName\": \"NC_000017.11\", \"start\": [ 7572837 ], \"end\": [ 7578641 ] } }, \"requestedGranularity\": \"record\", \"pagination\": { \"skip\": 0, \"limit\": 5 } } Range Queries are new to Beacon v2 Range Queries are new to Beacon v2 Beacon GeneId Queries \u00b6 GeneId Queries are in essence a variation of Range Queries in which the coordinates are replaced by the HGNC gene symbol. It is left to the implementation if the matching is done on variants annotated for the gene symbol or if a positional translation is being applied. Parameters \u00b6 geneId optional variantType OR alternateBases OR aminoacidChange variantMinLength variantMaxLength Beacon v2 GET for geneId (deletion CNV) ?geneId=EIF4A1&variantMaxLength=1000000&variantType=DEL Beacon Bracket Queries \u00b6 Bracket Queries allow the specification of sequence ranges for both start and end positions of a genomic variation. The typical example here is the query for similar structural variants - particularly CNVs - affecting a genomic region but potentially differing in their exact base extents. Parameters \u00b6 referenceName start (min) and start (max) - i.e. 2 start parameters end (min) and end (max) - i.e. 2 end parameters variantType (optional) Use of start and end Bracket queries require the use of two start and end parameters, in contrast to Range Queries . Example: CNV Query - TP53 Deletion Query by Coordinates \u00b6 The following example shows a \"bracket query\" for focal deletions of the TP53 gene locus: The start of the deletion has to occurr anywhere from approx. 2.5Mb 5' of the CDR start to just before the end of the CDR. The end of the matched CNVs has to be anywhere from the start of the gene locus to approx. 2.5Mb 3' of its end. This leads to matching of deletion CNVs which have at least some base overlap with the gene locus but are not larger than approx. 5Mb (operational definitions of focality vary between 1 and 5Mb). Beacon v2 GET Beacon v2 POST Beacon v1 Beacon v0.3 ?datasetIds=TEST&referenceName=NC_000017.11&variantType=DEL&start=5000000,7676592&end=7669607,10000000 Optional \u00b6 datasetIds=__some-dataset-ids__ filters ... List Parameters in GET Requests Since the direct interpretation of list parameters in queries is not supported by some server environments (e.g. PHP, GO\u2026), list parameters such as start and end should be provided as comma-concatenated strings when using them in GET requests. { \"$schema\" : \"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/framework/json/requests/beaconRequestBody.json\" , \"meta\" : { \"apiVersion\" : \"2.0\" , \"requestedSchemas\" : [ { \"entityType\" : \"genomicVariation\" , \"schema:\" : \"https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/models/json/beacon-v2-default-model/genomicVariations/defaultSchema.json\" } ] }, \"query\" : { \"requestParameters\" : { \"referenceName\" : \"NC_000017.11\" , \"start\" : [ 5000000 , 7676592 ], \"end\" : [ 7669607 , 10000000 ], \"variantType\" : \"DEL\" } }, \"requestedGranularity\" : \"record\" , \"pagination\" : { \"skip\" : 0 , \"limit\" : 5 } } There are optional parameters [ datasetIds , filters ...] and also the option to specify the response type (through requestedGranularity ) and returned data format ( requestedSchemas ). Please follow this up in the framework documentation . ?assemblyId=GRCh38&referenceName=17&variantType=DEL&start=5000000,7676592&end=7669607,10000000 Optional \u00b6 datasetIds=__some-dataset-ids__ CNV query options were only implemented with Beacon v0.4, based on Beacon + prototyping. Genomic Allele Query (Short Form) \u00b6 TBD Beacon v2 GET ?allele=NM_004006.2:c.4375C>T to be completed Aminoacid Change Query \u00b6 TBD Beacon v2 GET ?aminoacidChange=V600E to be complete variantType Parameter Interpretation \u00b6 The variantType parameter is essential for scoping queries beyond precise sequence queries. While versions of Beacon before v2 had demonstrated the use of a few, VCF derived values (particularly for CNV queries using DUP or DEL ), the relation of these values to underlying genomic variations had not been precisely defined. Implementation of variantType in Beacon Instances The current Beacon query model does not limit the use of values for variantType since at this time no single specification provides unanimous definitions of genomic variation categories. Future variantType parameter use While for legacy reasons and widespread use of VCFs as input source Beacon v2 documents the use of VCF-like terms, in principle other variant terms can be used (though with possibly negative implications in federated settings). The field of structural genomic variant annotations is rapidly developing, with more specific terms now becoming available e.g. through the Experimental Factor Ontology or the GA4GH Variant Representation Standard VRS (which ligns with the main EFO terms). Term Use Comparison \u00b6 Beacon VCF SO EFO VRS Notes DUP DUP 1 SO:0001742 copy_number_gain EFO:0030070 copy number gain low-level gain (implicit) a sequence alteration whereby the copy number of a given genomic region is greater than the reference sequence DUP DUP 1 SO:0001742 copy_number_gain EFO:0030071 low-level copy number gain low-level gain DUP DUP 1 SO:0001742 copy_number_gain EFO:0030072 high-level copy number gain high-level gain commonly but not consistently used for >=5 copies on a bi-allelic genome region DUP DUP 1 SO:0001742 copy_number_gain EFO:0030073 focal genome amplification high-level gain commonly but not consistently used for >=5 copies on a bi-allelic genome region, of limited size (operationally max. 1-5Mb) DEL DEL 1 SO:0001743 copy_number_loss EFO:0030067 copy number loss partial loss (implicit) a sequence alteration whereby the copy number of a given genomic region is smaller than the reference sequence DEL DEL 1 SO:0001743 copy_number_loss EFO:0030068 low-level copy number loss partial loss DEL DEL 1 SO:0001743 copy_number_loss EFO:0030069 complete genomic deletion complete loss complete genomic deletion (e.g. homozygous deletion on a bi-allelic genome region) Query Parameter Change Log \u00b6 Beacon v2 \u00b6 use of sequence reference id's which obviate the need for a assemblyId parameter range queries with specified single start and end parameters a query should match any vatiant with partial or complete overlap with this sequence range additional parameters (e.g. referenceBases , alternateBases , variantType ...) may be used to scope the range query query by aminoacidChange query by geneId variantMinLength , variantMaxLength Beacon v1 (based on v0.4) \u00b6 switch to 0-based interbase coordinates for the API with 1-based coordinates recommended for query forms this represents the common GA4GH usage and the practice e.g. of the UCSC genome browser introduction of bracketed queries specification of intervals for start and end positions when querying multi-base variants allows for \"fuzzy\" CNV queries support of a variantType parameter to specify e.g. CNV queries ( DUP , DEL ) variantType is not required for precise queries with specified referenceBases and alternateBases VCFv4.4 introduces an SVCLAIM field to disambiguate between in situ events (such as tandem duplications; known adjacency / break junction : SVCLAIM=J ) and events where e.g. only the change in abundance / read depth ( SVCLAIM=D ) has been determined. Both J and D flags can be combined. \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9","title":"Genomic Queries"},{"location":"variant-queries/#beacon-sequence-queries","text":"Sequence Queries query for the existence of a specified sequence at a given genomic position. Such queries correspond to the original Beacon queries and are used to match short, precisely defined genomic variants such as SNVs and INDELs.","title":"Beacon Sequence Queries"},{"location":"variant-queries/#beacon-range-queries","text":"Beacon Range Queries are supposed to return matches of any variant with at least partial overlap of the sequence range specified by reference_name , start and end parameters.","title":"Beacon Range Queries"},{"location":"variant-queries/#beacon-geneid-queries","text":"GeneId Queries are in essence a variation of Range Queries in which the coordinates are replaced by the HGNC gene symbol. It is left to the implementation if the matching is done on variants annotated for the gene symbol or if a positional translation is being applied.","title":"Beacon GeneId Queries"},{"location":"variant-queries/#beacon-bracket-queries","text":"Bracket Queries allow the specification of sequence ranges for both start and end positions of a genomic variation. The typical example here is the query for similar structural variants - particularly CNVs - affecting a genomic region but potentially differing in their exact base extents.","title":"Beacon Bracket Queries"},{"location":"variant-queries/#genomic-allele-query-short-form","text":"TBD Beacon v2 GET ?allele=NM_004006.2:c.4375C>T to be completed","title":"Genomic Allele Query (Short Form)"},{"location":"variant-queries/#aminoacid-change-query","text":"TBD Beacon v2 GET ?aminoacidChange=V600E to be complete","title":"Aminoacid Change Query"},{"location":"variant-queries/#varianttype-parameter-interpretation","text":"The variantType parameter is essential for scoping queries beyond precise sequence queries. While versions of Beacon before v2 had demonstrated the use of a few, VCF derived values (particularly for CNV queries using DUP or DEL ), the relation of these values to underlying genomic variations had not been precisely defined. Implementation of variantType in Beacon Instances The current Beacon query model does not limit the use of values for variantType since at this time no single specification provides unanimous definitions of genomic variation categories. Future variantType parameter use While for legacy reasons and widespread use of VCFs as input source Beacon v2 documents the use of VCF-like terms, in principle other variant terms can be used (though with possibly negative implications in federated settings). The field of structural genomic variant annotations is rapidly developing, with more specific terms now becoming available e.g. through the Experimental Factor Ontology or the GA4GH Variant Representation Standard VRS (which ligns with the main EFO terms).","title":"variantType Parameter Interpretation"},{"location":"variant-queries/#term-use-comparison","text":"Beacon VCF SO EFO VRS Notes DUP DUP 1 SO:0001742 copy_number_gain EFO:0030070 copy number gain low-level gain (implicit) a sequence alteration whereby the copy number of a given genomic region is greater than the reference sequence DUP DUP 1 SO:0001742 copy_number_gain EFO:0030071 low-level copy number gain low-level gain DUP DUP 1 SO:0001742 copy_number_gain EFO:0030072 high-level copy number gain high-level gain commonly but not consistently used for >=5 copies on a bi-allelic genome region DUP DUP 1 SO:0001742 copy_number_gain EFO:0030073 focal genome amplification high-level gain commonly but not consistently used for >=5 copies on a bi-allelic genome region, of limited size (operationally max. 1-5Mb) DEL DEL 1 SO:0001743 copy_number_loss EFO:0030067 copy number loss partial loss (implicit) a sequence alteration whereby the copy number of a given genomic region is smaller than the reference sequence DEL DEL 1 SO:0001743 copy_number_loss EFO:0030068 low-level copy number loss partial loss DEL DEL 1 SO:0001743 copy_number_loss EFO:0030069 complete genomic deletion complete loss complete genomic deletion (e.g. homozygous deletion on a bi-allelic genome region)","title":"Term Use Comparison"},{"location":"variant-queries/#query-parameter-change-log","text":"","title":"Query Parameter Change Log"},{"location":"variant-queries/#beacon-v2","text":"use of sequence reference id's which obviate the need for a assemblyId parameter range queries with specified single start and end parameters a query should match any vatiant with partial or complete overlap with this sequence range additional parameters (e.g. referenceBases , alternateBases , variantType ...) may be used to scope the range query query by aminoacidChange query by geneId variantMinLength , variantMaxLength","title":"Beacon v2"},{"location":"variant-queries/#beacon-v1-based-on-v04","text":"switch to 0-based interbase coordinates for the API with 1-based coordinates recommended for query forms this represents the common GA4GH usage and the practice e.g. of the UCSC genome browser introduction of bracketed queries specification of intervals for start and end positions when querying multi-base variants allows for \"fuzzy\" CNV queries support of a variantType parameter to specify e.g. CNV queries ( DUP , DEL ) variantType is not required for precise queries with specified referenceBases and alternateBases VCFv4.4 introduces an SVCLAIM field to disambiguate between in situ events (such as tandem duplications; known adjacency / break junction : SVCLAIM=J ) and events where e.g. only the change in abundance / read depth ( SVCLAIM=D ) has been determined. Both J and D flags can be combined. \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9","title":"Beacon v1 (based on v0.4)"},{"location":"what-is-beacon-v2/","text":"Summary \u00b6 Beacon v2 is a protocol/specification established by the Global Alliance for Genomics and Health initiative ( GA4GH ) that defines an open standard for federated discovery of genomic (and phenoclinic) data in biomedical research and clinical applications. Historical Tip Originally, the Beacon protocol (versions 0 and 1) allowed researchers to get information about the presence/absence of a given, specific, genomic mutation in a set of data, from patients of a given disease or from the population in general. The current version of the protocol is v2 and introduces new features which were considered important by the community such as: extended and clearer specified genomic variation queries , including patterns (wildcards) and region queries (i.e. returning variants within a genomic/chromosomal region) get a list of samples related to a phenotype, provided the required authentication or authorization powerful filters , primarily based on CURIE terms for ontologies and references, including options to control the use of hierarchical terms or the precision of term matching scoped data delivery (e.g. matched variant details or sample information) as part of Beacon responses or through handover protocols Components \u00b6 Beacon v2 consists of two components, the Framework and the Models . The Framework contains the format for the requests and responses, whereas the Models define the structure of the biological data response. The overall function of these components is to provide the instructions to design a REST API (REpresentational State Transfer Application Programming Interface) with OpenAPI Specification (OAS). The OAS defines a standard, language-agnostic interface that is used by software developers to implement REST APIs . Framework interdependency, releases and alternative models In principle, this dual system allows for different Models (in other domains outside of the Beacon v2 realm, e.g. \"Imaging Beacon\" to be built using the same Framework. However, in the current context of Beacon v2, we consider the two elements interdependent and likely to be updated together for subsequent major versions (e.g. from v2 to v3).","title":"What is Beacon v2?"},{"location":"what-is-beacon-v2/#summary","text":"Beacon v2 is a protocol/specification established by the Global Alliance for Genomics and Health initiative ( GA4GH ) that defines an open standard for federated discovery of genomic (and phenoclinic) data in biomedical research and clinical applications. Historical Tip Originally, the Beacon protocol (versions 0 and 1) allowed researchers to get information about the presence/absence of a given, specific, genomic mutation in a set of data, from patients of a given disease or from the population in general. The current version of the protocol is v2 and introduces new features which were considered important by the community such as: extended and clearer specified genomic variation queries , including patterns (wildcards) and region queries (i.e. returning variants within a genomic/chromosomal region) get a list of samples related to a phenotype, provided the required authentication or authorization powerful filters , primarily based on CURIE terms for ontologies and references, including options to control the use of hierarchical terms or the precision of term matching scoped data delivery (e.g. matched variant details or sample information) as part of Beacon responses or through handover protocols","title":"Summary"},{"location":"what-is-beacon-v2/#components","text":"Beacon v2 consists of two components, the Framework and the Models . The Framework contains the format for the requests and responses, whereas the Models define the structure of the biological data response. The overall function of these components is to provide the instructions to design a REST API (REpresentational State Transfer Application Programming Interface) with OpenAPI Specification (OAS). The OAS defines a standard, language-agnostic interface that is used by software developers to implement REST APIs . Framework interdependency, releases and alternative models In principle, this dual system allows for different Models (in other domains outside of the Beacon v2 realm, e.g. \"Imaging Beacon\" to be built using the same Framework. However, in the current context of Beacon v2, we consider the two elements interdependent and likely to be updated together for subsequent major versions (e.g. from v2 to v3).","title":"Components"},{"location":"implementations/org.progenetix/","text":"Progenetix & Beacon + The Beacon+ implementation - developed in the Python & MongoDB based bycon project - implements an expanding set of Beacon v2 paths for the Progenetix resource . Scoped responses from query object \u00b6 In queries with a complete beaconRequestBody the type of the delivered data is independent of the path and determined in the requestedSchemas . So far, Beacon+ will compare the first of those to its supported responses and provide the results accordingly; it doesn't matter if the endpoint was /beacon/biosamples/ or /beacon/variants/ etc. Below is an example for the standard test \"small deletion CNVs in the CDKN2A locus, in gliomas\" Progenetix test query, here responding with the matched variants. Exchanging the entityType entry to { \"entityType\": \"biosample\", \"schema:\": \"https://progenetix.org/services/schemas/Biosample/\"} would change this to a biosample response. The example ccan be tested by POSTing this as application/json to http://progenetix.org/beacon/variants/ or http://progenetix.org/beacon/biosamples/ . { \"$schema\" : \"beaconRequestBody.json\" , \"meta\" : { \"apiVersion\" : \"2.0\" , \"requestedSchemas\" : [ { \"entityType\" : \"genomicVariant\" , \"schema:\" : \"https://progenetix.org/services/schemas/genomicVariant\" } ] }, \"query\" : { \"requestParameters\" : { \"datasets\" : { \"datasetIds\" : [ \"progenetix\" ] }, \"assemblyid\" : \"GRCh38\" , \"referenceName\" : \"9\" , \"start\" : [ 21500001 , 21975098 ], \"end\" : [ 21967753 , 22500000 ], \"variantType\" : \"DEL\" } }, \"filters\" : [ { \"id\" : \"NCIT:C3058\" , \"includeDescendantTerms\" : true } ] } Paths \u00b6 Base / \u00b6 The root path provides the standard BeaconInfoResponse . / Base /filtering_terms \u00b6 /filtering_terms/ \u00b6 /filtering_terms/ Base /biosamples \u00b6 /biosamples/ + query \u00b6 /biosamples?filters=cellosaurus:CVCL_0004 this example retrieves all biosamples having an annotation for the Cellosaurus CVCL_0004 identifier (K562) /biosamples/{id}/ \u00b6 /biosamples/pgxbs-kftva5c9 retrieval of a single biosample /biosamples/?testMode=true \u00b6 /biosamples?testMode=true retrieval of some random samples for testing API responses /biosamples/{id}/g_variants \u00b6 /biosamples/pgxbs-kftva5c9/g_variants/ retrieval of all variants from a single biosample Base /individuals \u00b6 /individuals + query \u00b6 /individuals?filters=NCIT:C7541 this example retrieves all individuals having an annotation associated with NCIT:C7541 (retinoblastoma) in Progenetix, this particular code will be part of the annotation for the biosample(s) associated with the returned individual /individuals/?filters=PATO:0020001,NCIT:C9291 this query returns information about individuals with an anal carcinoma ( NCIT:C9291 ) and a known male genotypic sex ( PATO:0020001 ) in Progenetix, the information about its sex is associated with the Individual object (and therefore in the individuals collection), whereas the information about the cancer type is a property of the Biosample (and therefore stored in the biosamples collection) /individuals + query + requestedSchema=phenopacket \u00b6 Progenetix provides phenopacket as (currently experimental) alternative schema ( requestedSchema ) for /individuals . This feature allows the combined delivery of attributes annotated w/ the biosamples and such general of the individual, as well as e.g. linking to genomic variation data. /individuals?requestedSchema=phenopacket&filters=PATO:0020001,NCIT:C9291 /individuals/{id} \u00b6 /individuals/pgxind-kftx25hb/ retrieval of a single individual /individuals/?testMode=true \u00b6 /individuals?testMode=true retrieval of some random individuals for testing API responses /individuals/{id}/g_variants \u00b6 /individuals/pgxind-kftx25hb/g_variants/ /individuals/pgxind-kftx25hb/genomicVariations/ retrieval of all variants from a single individual Base /g_variants \u00b6 There is currently (April 2021) still some discussion about the implementation and naming of the different types of genomic variant endpoints. Since the Progenetix collections follow a \"variant observations\" principle all variant requests are directed against the local variants collection. variants is used as alias. /g_variants?testMode=true \u00b6 /g_variants?testMode=true retrieval of some random variants for testing API responses /g_variants + query \u00b6 /variants/?assemblyId=GRCh38&referenceName=17&variantType=DEL&filterLogic=AND&start=7500000&start=7676592&end=7669607&end=7800000 This is an example for a Beacon \"Bracket Query\" which will return focal deletions in the TP53 locus (by position). /g_variants/{id} \u00b6 /g_variants/pgxvar-5f5a35586b8c1d6d377b77f6 /g_variants/{id}/biosamples \u00b6 /g_variants/pgxvar-5f5a35586b8c1d6d377b77f6/biosamples Base /analyses \u00b6 The Beacon v2 /analyses endpoint accesses the Progenetix callsets collection documents, i.e. information about the genomic variants derived from a single analysis. In Progenetix the main use of these documents is the storage of e.g. CNV statistics or binned genome calls. /callsets is an alias in Progenetix /analyses?testMode=true \u00b6 /analyses/?testMode=true retrieval of some random analyses for testing API responses /analyses + query \u00b6 /analyses?filters=cellosaurus:CVCL_0004 this example retrieves all biosamples having an annotation for the Cellosaurus CVCL_0004 identifier (K562) Changes 2022-04-17: removed some non-standard examples (e.g. variants_in_sample ) 2021-11-02: added /testMode example 2021-07-21: added /map endpoint (incomplete/unser construction) 2021-07-21: added /configuration endpoint (incomplete/unser construction) 2021-07-02: update for /filteringTerms endpoint to v2b4 2021-06-25: updated for datasets parameter as object 2021-06-24: Updated response structure conforming to v2b4: response_summary removal of response root element & direct use of result_sets 2021-06-24: Updated query structure conforming to v2b4 entityType format fixed filters now objects 2021-06-23: New JSON POST example & topic 2021-06-07: Added variants_interpretations example 2021-05-29: New resultSets response format no change to front-end or examples here but change of bycon backend 2021-05-11: Added /analyses 2021-05-02: Added base path for BeaconInfoResponse 2021-04-26: First Version","title":"Org.progenetix"},{"location":"implementations/org.progenetix/#scoped-responses-from-query-object","text":"In queries with a complete beaconRequestBody the type of the delivered data is independent of the path and determined in the requestedSchemas . So far, Beacon+ will compare the first of those to its supported responses and provide the results accordingly; it doesn't matter if the endpoint was /beacon/biosamples/ or /beacon/variants/ etc. Below is an example for the standard test \"small deletion CNVs in the CDKN2A locus, in gliomas\" Progenetix test query, here responding with the matched variants. Exchanging the entityType entry to { \"entityType\": \"biosample\", \"schema:\": \"https://progenetix.org/services/schemas/Biosample/\"} would change this to a biosample response. The example ccan be tested by POSTing this as application/json to http://progenetix.org/beacon/variants/ or http://progenetix.org/beacon/biosamples/ . { \"$schema\" : \"beaconRequestBody.json\" , \"meta\" : { \"apiVersion\" : \"2.0\" , \"requestedSchemas\" : [ { \"entityType\" : \"genomicVariant\" , \"schema:\" : \"https://progenetix.org/services/schemas/genomicVariant\" } ] }, \"query\" : { \"requestParameters\" : { \"datasets\" : { \"datasetIds\" : [ \"progenetix\" ] }, \"assemblyid\" : \"GRCh38\" , \"referenceName\" : \"9\" , \"start\" : [ 21500001 , 21975098 ], \"end\" : [ 21967753 , 22500000 ], \"variantType\" : \"DEL\" } }, \"filters\" : [ { \"id\" : \"NCIT:C3058\" , \"includeDescendantTerms\" : true } ] }","title":"Scoped responses from query object"},{"location":"implementations/org.progenetix/#paths","text":"","title":"Paths"},{"location":"schemas-md/analyses_defaultSchema/","text":"Term Description Type Properties Example Enum aligner Reference to mapping/alignment software string NA bwa-0.7.8 NA analysisDate Date at which analysis was performed. string NA 2021-10-17 NA biosampleId Reference to the id of the biosample this analysis is reporting on. string NA S0001 NA id Analysis reference ID (external accession or internal ID) string NA NA NA individualId Reference to the id of the individual this analysis is reporting on. string NA P0001 NA info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA pipelineName Analysis pipeline and version if a standardized pipeline was used string NA Pipeline-panel-0001-v1 NA pipelineRef Link to Analysis pipeline resource string NA doi.org/10.48511/workflowhub.workflow.111.1 NA runId Run identifier (external accession or internal ID). string NA SRR10903401 NA variantCaller Reference to variant calling software / pipeline string NA GATK4.0 NA Examples \u00b6 These are examples extracted directly from the GitHub repository . MIN MAX { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"analysisDate\" : \"2021-10-17\" , \"id\" : \"analyses-example-0001\" , \"pipelineName\" : \"Pipeline-panel-0001-v1\" } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"aligner\" : \"bwa-0.7.8\" , \"analysisDate\" : \"2021-10-17\" , \"biosampleId\" : \"S0001\" , \"id\" : \"analyses-example-0001\" , \"individualId\" : \"P0001\" , \"pipelineName\" : \"Pipeline-panel-0001-v1\" , \"pipelineRef\" : \"https://doi.org/10.48511/workflowhub.workflow.111.1\" , \"runId\" : \"SRR10903401\" , \"variantCaller\" : \"GATK4.0\" }","title":"Analyses"},{"location":"schemas-md/analyses_defaultSchema/#examples","text":"These are examples extracted directly from the GitHub repository . MIN MAX { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"analysisDate\" : \"2021-10-17\" , \"id\" : \"analyses-example-0001\" , \"pipelineName\" : \"Pipeline-panel-0001-v1\" } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"aligner\" : \"bwa-0.7.8\" , \"analysisDate\" : \"2021-10-17\" , \"biosampleId\" : \"S0001\" , \"id\" : \"analyses-example-0001\" , \"individualId\" : \"P0001\" , \"pipelineName\" : \"Pipeline-panel-0001-v1\" , \"pipelineRef\" : \"https://doi.org/10.48511/workflowhub.workflow.111.1\" , \"runId\" : \"SRR10903401\" , \"variantCaller\" : \"GATK4.0\" }","title":"Examples"},{"location":"schemas-md/beacon_terms/","text":"affected Age ageAtExposure ageAtOnset ageAtProcedure ageOfOnset ageRange AgeRange aligner Allele alleleFrequency alleleOrigin alternateBases aminoacidChanges analysisDate analysisId annotatedWith assayCode availability availabilityCount biosampleId biosampleStatus bodySite caseLevelData category clinicalInterpretations clinicalRelevance clinvarVariantId cohortDataTypes cohortDesign cohortSize cohortType collectionDate collectionEvents collectionMoment Complex Value conditionId CopyNumber createDateTime cumulativeDose dataUseConditions date dateOfProcedure description diagnosticMarkers disease diseaseCode diseaseConditions diseases distribution doseIntervals duoDataUse duration effect end ethnicities ethnicity eventAgeRange eventCases eventControls eventDataTypes eventDate eventDiseases eventEthnicities eventGenders eventLocations eventNum eventPhenotypes eventSize eventTimeline evidence evidenceCode evidenceType excluded exclusionCriteria exposureCode exposures externalUrl familyHistory featureClass featureID featureType frequencies frequencyInPopulations genders geneIds genomicFeatures genomicHGVSId geographicOrigin GestationalAge Haplotype histologicalDiagnosis id identifiers inclusionCriteria individualId info interval interventionsOrProcedures iso8601duration karyotypicSex label LegacyVariation libraryLayout librarySelection librarySource libraryStrategy location locations measurements measurementValue measures memberId members modifiers molecularAttributes molecularEffects MolecularVariation name notes numSubjects observationMoment obtentionProcedure onset pathologicalStage pathologicalTnmFinding pedigrees phenotypicConditions phenotypicEffects phenotypicFeatures pipelineName pipelineRef platform platformModel population procedure procedureCode proteinHGVSIds quantity reference referenceBases referenceRange resolution role routeOfAdministration runDate runId sampleOriginDetail sampleOriginType sampleProcessing sampleStorage scheduleFrequency severity sex source sourceReference stage start SystemicVariation TimeInterval toolName toolReferences transcriptHGVSIds treatmentCode treatments tumorGrade tumorProgression unit updateDateTime value Value variantAlternativeIds variantCaller variantInternalId variantLevelData variantType variation version zygosity","title":"Terms List"},{"location":"schemas-md/biosamples_defaultSchema/","text":"Term Description Type Properties Example Enum biosampleStatus Definition of an ontology term. object id , label NA NA collectionDate Date of biosample collection in ISO8601 format. string NA 2021-04-23 NA collectionMoment Individual's or cell cullture age at the time of sample collection in the ISO8601 duration format P[n]Y[n]M[n]DT[n]H[n]M[n]S . string NA P32Y6M1D, P7D NA diagnosticMarkers Clinically relevant biomarkers. RECOMMENDED. array id , label NA NA histologicalDiagnosis Definition of an ontology term. object id , label NA NA id Biosample identifier (external accession or internal ID). string NA S0001 NA individualId Reference to the individual from which that sample was obtained. string NA P0001 NA info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA measurements List of measurements of the sample. array assayCode , date , measurementValue , notes , observationMoment , procedure NA NA notes Any relevant info about the biosample that does not fit into any other field in the schema. string NA Some free text NA obtentionProcedure Class describing a clinical procedure or intervention. Provenance: GA4GH Phenopackets v2 Procedure object ageAtProcedure , bodySite , dateOfProcedure , procedureCode NA NA pathologicalStage Definition of an ontology term. object id , label NA NA pathologicalTnmFinding Pathological TNM findings, if applicable, preferably as subclass of NCIT:C48698 - Cancer TNM Finding Category (NCIT:C48698). RECOMMENDED. array id , label [{\"id\": \"NCIT:C48725\", \"label\": \"T2a Stage Finding\"}, {\"id\": \"NCIT:C48709\", \"label\": \"N1c Stage Finding\"}, {\"id\": \"NCIT:C48699\", \"label\": \"M0 Stage Finding\"}] NA phenotypicFeatures List of phenotypic abnormalities of the sample. RECOMMENDED. array evidence , excluded , featureType , modifiers , notes , onset , resolution , severity NA NA sampleOriginDetail Definition of an ontology term. object id , label NA NA sampleOriginType Definition of an ontology term. object id , label NA NA sampleProcessing Definition of an ontology term. object id , label NA NA sampleStorage Definition of an ontology term. object id , label NA NA tumorGrade Definition of an ontology term. object id , label NA NA tumorProgression Definition of an ontology term. object id , label NA NA Examples \u00b6 These are examples extracted directly from the GitHub repository . MIN MID { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"biosampleStatus\" : { \"id\" : \"EFO:0009655\" , \"label\" : \"abnormal sample\" }, \"id\" : \"sample-example-0001\" , \"sampleOriginType\" : { \"id\" : \"UBERON:0000474\" , \"label\" : \"female reproductive system\" } } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"biosampleStatus\" : { \"id\" : \"EFO:0009655\" , \"label\" : \"abnormal sample\" }, \"collectionDate\" : \"2020-09-11\" , \"collectionMoment\" : \"P32Y6M1D\" , \"id\" : \"sample-example-0001\" , \"obtentionProcedure\" : { \"procedureCode\" : { \"id\" : \"OBI:0002654\" , \"label\" : \"needle biopsy\" } }, \"sampleOriginType\" : { \"id\" : \"UBERON:0000992\" , \"label\" : \"ovary\" } }","title":"Biosamples"},{"location":"schemas-md/biosamples_defaultSchema/#examples","text":"These are examples extracted directly from the GitHub repository . MIN MID { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"biosampleStatus\" : { \"id\" : \"EFO:0009655\" , \"label\" : \"abnormal sample\" }, \"id\" : \"sample-example-0001\" , \"sampleOriginType\" : { \"id\" : \"UBERON:0000474\" , \"label\" : \"female reproductive system\" } } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"biosampleStatus\" : { \"id\" : \"EFO:0009655\" , \"label\" : \"abnormal sample\" }, \"collectionDate\" : \"2020-09-11\" , \"collectionMoment\" : \"P32Y6M1D\" , \"id\" : \"sample-example-0001\" , \"obtentionProcedure\" : { \"procedureCode\" : { \"id\" : \"OBI:0002654\" , \"label\" : \"needle biopsy\" } }, \"sampleOriginType\" : { \"id\" : \"UBERON:0000992\" , \"label\" : \"ovary\" } }","title":"Examples"},{"location":"schemas-md/cohorts_defaultSchema/","text":"Term Description Type Properties Example Enum cohortDataTypes Type of information. Preferably values from Genomics Cohorts Knowledge Ontology (GeCKO) or others when GeCKO is not applicable. array id , label [{\"id\": \"OGMS:0000015\", \"label\": \"clinical history\"}, {\"id\": \"OBI:0000070\", \"label\": \"genotyping assay\"}, {\"id\": \"OMIABIS:0000060\", \"label\": \"survey data\"}] NA cohortDesign Definition of an ontology term. object id , label NA NA cohortSize Count of unique Individuals in cohort (individuals meeting criteria for \u00b4user-defined\u00b4 cohorts). If not previously known, it could be calculated by counting the individuals in the cohort. integer NA 14765, 20000 NA cohortType Cohort type by its definition. If a cohort is declared \u00b4study-defined\u00b4 or \u00b4beacon-defined\u00b4 criteria are to be entered in cohort_inclusion_criteria; if a cohort is declared \u2018user-defined' cohort_inclusion_criteria could be automatically populated from the parameters used to perform the query. string NA NA study-defined, beacon-defined, user-defined collectionEvents TBD array eventAgeRange , eventCases , eventControls , eventDataTypes , eventDate , eventDiseases , eventEthnicities , eventGenders , eventLocations , eventNum , eventPhenotypes , eventSize , eventTimeline NA NA exclusionCriteria Criteria used for defining the cohort. It is assumed that all cohort participants will match or NOT match such criteria. object ageRange , diseaseConditions , ethnicities , genders , locations , phenotypicConditions NA NA id Cohort identifier. For \u00b4study-defined\u00b4 or \u00b4beacon-defined\u00b4cohorts this field is set by the implementer. For \u00b4user-defined\u00b4 this unique identifier could be generated upon the query that defined the cohort, but could be later edited by the user. string NA cohort-T2D-2010 NA inclusionCriteria Criteria used for defining the cohort. It is assumed that all cohort participants will match or NOT match such criteria. object ageRange , diseaseConditions , ethnicities , genders , locations , phenotypicConditions NA NA name Name of the cohort. For \u00b4user-defined\u00b4 this field could be generated upon the query, e.g. a value that is a concatenationor some representation of the user query. string NA Wellcome Trust Case Control Consortium, GCAT Genomes for Life NA Examples \u00b6 These are examples extracted directly from the GitHub repository . MIN MID MAX { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"cohortType\" : \"study-defined\" , \"id\" : \"cohort0001\" , \"name\" : \"GCAT Genomes for Life\" } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"cohortDataTypes\" : [ { \"id\" : \"OGMS:0000015\" , \"label\" : \"clinical history\" }, { \"id\" : \"OBI:0000070\" , \"label\" : \"genotyping assay\" }, { \"id\" : \"OMIABIS:0000060\" , \"label\" : \"survey data\" } ], \"cohortDesign\" : { \"id\" : \"OMIABIS:0001019\" , \"label\" : \"longitudinal study design\" }, \"cohortSize\" : 20000 , \"cohortType\" : \"study-defined\" , \"id\" : \"cohort0001\" , \"inclusionCriteria\" : { \"ageRange\" : { \"end\" : { \"iso8601duration\" : \"P40Y\" }, \"start\" : { \"iso8601duration\" : \"P18Y\" } }, \"genders\" : [ { \"id\" : \"NCIT:C16576\" , \"label\" : \"female\" }, { \"id\" : \"NCIT:C20197\" , \"label\" : \"male\" } ], \"locations\" : [ { \"id\" : \"GAZ:00004501\" , \"label\" : \"Catalonia Autonomous Community\" } ] }, \"name\" : \"GCAT Genomes for Life\" } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"cohortDataTypes\" : [ { \"id\" : \"OGMS:0000015\" , \"label\" : \"clinical history\" }, { \"id\" : \"OBI:0000070\" , \"label\" : \"genotyping assay\" }, { \"id\" : \"OMIABIS:0000060\" , \"label\" : \"survey data\" } ], \"cohortDesign\" : { \"id\" : \"OMIABIS:0001019\" , \"label\" : \"longitudinal study design\" }, \"cohortSize\" : 20000 , \"cohortType\" : \"study-defined\" , \"collectionEvents\" : [ { \"eventDataTypes\" : { \"availability\" : true , \"distribution\" : { \"dataTypes\" : { \"blood collected from fasting subject\" : 51 , \"survey data\" : 98 } } }, \"eventDate\" : \"2019-04-23\" , \"eventEthnicities\" : { \"availability\" : true , \"availabilityCount\" : 101 , \"distribution\" : { \"ethnicities\" : { \"African\" : 3 , \"European\" : 90 , \"Latin American\" : 8 } } }, \"eventGenders\" : { \"availability\" : true , \"availabilityCount\" : 101 , \"distribution\" : { \"genders\" : { \"female\" : 51 , \"male\" : 50 } } }, \"eventNum\" : 1 , \"eventSize\" : 101 } ], \"id\" : \"cohort0001\" , \"inclusionCriteria\" : { \"ageRange\" : { \"end\" : { \"iso8601duration\" : \"P40Y\" }, \"start\" : { \"iso8601duration\" : \"P18Y\" } }, \"genders\" : [ { \"id\" : \"NCIT:C16576\" , \"label\" : \"female\" }, { \"id\" : \"NCIT:C20197\" , \"label\" : \"male\" } ], \"locations\" : [ { \"id\" : \"GAZ:00004501\" , \"label\" : \"Catalonia Autonomous Community\" } ] }, \"name\" : \"GCAT Genomes for Life\" }","title":"Cohorts"},{"location":"schemas-md/cohorts_defaultSchema/#examples","text":"These are examples extracted directly from the GitHub repository . MIN MID MAX { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"cohortType\" : \"study-defined\" , \"id\" : \"cohort0001\" , \"name\" : \"GCAT Genomes for Life\" } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"cohortDataTypes\" : [ { \"id\" : \"OGMS:0000015\" , \"label\" : \"clinical history\" }, { \"id\" : \"OBI:0000070\" , \"label\" : \"genotyping assay\" }, { \"id\" : \"OMIABIS:0000060\" , \"label\" : \"survey data\" } ], \"cohortDesign\" : { \"id\" : \"OMIABIS:0001019\" , \"label\" : \"longitudinal study design\" }, \"cohortSize\" : 20000 , \"cohortType\" : \"study-defined\" , \"id\" : \"cohort0001\" , \"inclusionCriteria\" : { \"ageRange\" : { \"end\" : { \"iso8601duration\" : \"P40Y\" }, \"start\" : { \"iso8601duration\" : \"P18Y\" } }, \"genders\" : [ { \"id\" : \"NCIT:C16576\" , \"label\" : \"female\" }, { \"id\" : \"NCIT:C20197\" , \"label\" : \"male\" } ], \"locations\" : [ { \"id\" : \"GAZ:00004501\" , \"label\" : \"Catalonia Autonomous Community\" } ] }, \"name\" : \"GCAT Genomes for Life\" } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"cohortDataTypes\" : [ { \"id\" : \"OGMS:0000015\" , \"label\" : \"clinical history\" }, { \"id\" : \"OBI:0000070\" , \"label\" : \"genotyping assay\" }, { \"id\" : \"OMIABIS:0000060\" , \"label\" : \"survey data\" } ], \"cohortDesign\" : { \"id\" : \"OMIABIS:0001019\" , \"label\" : \"longitudinal study design\" }, \"cohortSize\" : 20000 , \"cohortType\" : \"study-defined\" , \"collectionEvents\" : [ { \"eventDataTypes\" : { \"availability\" : true , \"distribution\" : { \"dataTypes\" : { \"blood collected from fasting subject\" : 51 , \"survey data\" : 98 } } }, \"eventDate\" : \"2019-04-23\" , \"eventEthnicities\" : { \"availability\" : true , \"availabilityCount\" : 101 , \"distribution\" : { \"ethnicities\" : { \"African\" : 3 , \"European\" : 90 , \"Latin American\" : 8 } } }, \"eventGenders\" : { \"availability\" : true , \"availabilityCount\" : 101 , \"distribution\" : { \"genders\" : { \"female\" : 51 , \"male\" : 50 } } }, \"eventNum\" : 1 , \"eventSize\" : 101 } ], \"id\" : \"cohort0001\" , \"inclusionCriteria\" : { \"ageRange\" : { \"end\" : { \"iso8601duration\" : \"P40Y\" }, \"start\" : { \"iso8601duration\" : \"P18Y\" } }, \"genders\" : [ { \"id\" : \"NCIT:C16576\" , \"label\" : \"female\" }, { \"id\" : \"NCIT:C20197\" , \"label\" : \"male\" } ], \"locations\" : [ { \"id\" : \"GAZ:00004501\" , \"label\" : \"Catalonia Autonomous Community\" } ] }, \"name\" : \"GCAT Genomes for Life\" }","title":"Examples"},{"location":"schemas-md/datasets_defaultSchema/","text":"Term Description Type Properties Example Enum createDateTime Time in date-time ISO8601 string format. string NA 1999-08-05T17:21:00+01:00, 2002-09-21T02:37:00-08:00 NA dataUseConditions Data use conditions object duoDataUse NA NA description Description of the dataset string NA This dataset provides examples of the actual data in this Beacon instance. NA externalUrl URL to an external system providing more dataset information (RFC 3986 format). string NA example.org/wiki/Main_Page NA id Unique identifier of the dataset string NA ds01010101 NA info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA name Name of the dataset string NA Dataset with synthetic data NA updateDateTime Time in date-time ISO8601 string format. string NA 1999-08-05T17:21:00+01:00, 2002-09-21T02:37:00-08:00 NA version Version of the dataset string NA v1.1 NA Examples \u00b6 These are examples extracted directly from the GitHub repository . MAX MIN { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"createDateTime\" : \"2017-01-17T20:33:40Z\" , \"dataUseConditions\" : { \"duoDataUse\" : [ { \"id\" : \"DUO:0000007\" , \"label\" : \"disease specific research\" , \"modifiers\" : [ { \"id\" : \"EFO:0001645\" , \"label\" : \"coronary artery disease\" } ], \"version\" : \"17-07-2016\" } ] }, \"description\" : \"This dataset provides examples of the actual data in this Beacon instance.\" , \"externalUrl\" : \"http://example.org/wiki/Main_Page\" , \"id\" : \"ds01010101\" , \"name\" : \"Dataset with synthetic data\" , \"updateDateTime\" : \"2017-01-17T20:33:40Z\" , \"version\" : \"v1.1\" } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"id\" : \"ds01010101\" , \"name\" : \"Dataset with synthetic data\" }","title":"Datasets"},{"location":"schemas-md/datasets_defaultSchema/#examples","text":"These are examples extracted directly from the GitHub repository . MAX MIN { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"createDateTime\" : \"2017-01-17T20:33:40Z\" , \"dataUseConditions\" : { \"duoDataUse\" : [ { \"id\" : \"DUO:0000007\" , \"label\" : \"disease specific research\" , \"modifiers\" : [ { \"id\" : \"EFO:0001645\" , \"label\" : \"coronary artery disease\" } ], \"version\" : \"17-07-2016\" } ] }, \"description\" : \"This dataset provides examples of the actual data in this Beacon instance.\" , \"externalUrl\" : \"http://example.org/wiki/Main_Page\" , \"id\" : \"ds01010101\" , \"name\" : \"Dataset with synthetic data\" , \"updateDateTime\" : \"2017-01-17T20:33:40Z\" , \"version\" : \"v1.1\" } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"id\" : \"ds01010101\" , \"name\" : \"Dataset with synthetic data\" }","title":"Examples"},{"location":"schemas-md/genomicVariations_defaultSchema/","text":"Term Description Type Properties Example Enum caseLevelData caseLevelData reports about the variation instances observed in individual analyses. array alleleOrigin , analysisId , biosampleId , clinicalInterpretations , id , individualId , phenotypicEffects , runId , zygosity NA NA frequencyInPopulations NA array frequencies , source , sourceReference , version NA NA identifiers NA object clinvarVariantId , genomicHGVSId , proteinHGVSIds , transcriptHGVSIds , variantAlternativeIds NA NA molecularAttributes NA object aminoacidChanges , geneIds , genomicFeatures , molecularEffects NA NA variantInternalId Reference to the internal variant ID. This represents the primary key/identifier of that variant inside a given Beacon instance. Different Beacon instances may use identical id values, referring to unrelated variants. Public identifiers such as the GA4GH Variant Representation Id (VRSid) MUST be returned in the identifiers section. A Beacon instance can, of course, use the VRSid as their own internal id but still MUST represent this then in the identifiers section. string NA var00001, v110112 NA variantLevelData NA object clinicalInterpretations , phenotypicEffects NA NA variation NA oneOf LegacyVariation , MolecularVariation , SystemicVariation NA NA Examples \u00b6 These are examples extracted directly from the GitHub repository . MIN MIN MID { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"variantInternalId\" : \"GRCh37-1-55505652-G-A\" , \"variation\" : { \"alternateBases\" : \"A\" , \"location\" : { \"interval\" : { \"end\" : { \"type\" : \"Number\" , \"value\" : 5505653 }, \"start\" : { \"type\" : \"Number\" , \"value\" : 5505652 }, \"type\" : \"SequenceInterval\" }, \"sequence_id\" : \"refseq:NC_000001.10\" , \"type\" : \"SequenceLocation\" }, \"variantType\" : \"SNP\" } } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"variantInternalId\" : \"GRCh37-1-55505652-G-A\" , \"variation\" : { \"location\" : { \"interval\" : { \"end\" : { \"type\" : \"Number\" , \"value\" : 5505653 }, \"start\" : { \"type\" : \"Number\" , \"value\" : 5505652 }, \"type\" : \"SequenceInterval\" }, \"sequence_id\" : \"refseq:NC_000001.10\" , \"type\" : \"SequenceLocation\" }, \"state\" : { \"sequence\" : \"A\" , \"type\" : \"SequenceState\" }, \"type\" : \"Allele\" } } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"frequencyInPopulations\" : [ { \"frequencies\" : [ { \"alleleFrequency\" : 2.939e-05 , \"population\" : \"European (non-Finish)\" }, { \"alleleFrequency\" : 0 , \"population\" : \"Other\" } ], \"source\" : \"gnomaD Genomes\" , \"sourceReference\" : \"https://gnomad.broadinstitute.org/\" , \"version\" : \"v3.1.1\" }, { \"frequencies\" : [ { \"alleleFrequency\" : 9e-05 , \"population\" : \"Total\" }, { \"alleleFrequency\" : 6e-05 , \"population\" : \"European\" }, { \"alleleFrequency\" : 0 , \"population\" : \"African\" } ], \"source\" : \"ALFA\" , \"sourceReference\" : \"https://www.ncbi.nlm.nih.gov/snp/docs/gsr/alfa/\" , \"version\" : \"20201027095038\" } ], \"identifiers\" : { \"clinVarIds\" : [ \"434136\" , \"VCV000440707.6\" ], \"genomicHGVSId\" : \"NC_000001.11:g.55039979G>A\" , \"proteinHGVSIds\" : [ \"NP_777596.2:p.Glu48Lys\" ], \"transcriptHGVSIds\" : [ \"NM_174936.4:c.142G>A\" ], \"variantAlternativeIds\" : [ \"dbSNP:rs3975092470\" , \"ClinGen: CA340482854\" ] }, \"molecularAttributes\" : { \"aminoacidChanges\" : [ \"E48K\" ], \"geneIds\" : [ \"PCSK9\" , \"LRG_275\" ], \"molecularEffects\" : [ { \"id\" : \"ENSGLOSSARY:0000150\" , \"label\" : \"Missense variant\" } ] }, \"variantInternalId\" : \"var123\" , \"variantLevelData\" : { \"clinicalInterpretations\" : [ { \"category\" : { \"id\" : \"MONDO:0000001\" , \"label\" : \"disease or disorder\" }, \"clinicalRelevance\" : \"pathogenic\" , \"conditionId\" : \"famchol1\" , \"effect\" : { \"id\" : \"MONDO:0007750\" , \"label\" : \"Familial hypercholesterolemia 1\" } }, { \"category\" : { \"id\" : \"MONDO:0000001\" , \"label\" : \"disease or disorder\" }, \"clinicalRelevance\" : \"uncertain significance\" , \"conditionId\" : \"famchol3\" , \"effect\" : { \"id\" : \"MONDO:0011369\" , \"label\" : \"hypercholesterolemia, autosomal dominant, 3\" } } ] }, \"variation\" : { \"alternateBases\" : \"A\" , \"location\" : { \"interval\" : { \"end\" : { \"type\" : \"Number\" , \"value\" : 55039980 }, \"start\" : { \"type\" : \"Number\" , \"value\" : 55039979 }, \"type\" : \"SequenceInterval\" }, \"sequence_id\" : \"refseq:NC_000001.11\" , \"type\" : \"SequenceLocation\" }, \"referenceBases\" : \"G\" , \"variantType\" : \"SNP\" } }","title":"Genomic Variations"},{"location":"schemas-md/genomicVariations_defaultSchema/#examples","text":"These are examples extracted directly from the GitHub repository . MIN MIN MID { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"variantInternalId\" : \"GRCh37-1-55505652-G-A\" , \"variation\" : { \"alternateBases\" : \"A\" , \"location\" : { \"interval\" : { \"end\" : { \"type\" : \"Number\" , \"value\" : 5505653 }, \"start\" : { \"type\" : \"Number\" , \"value\" : 5505652 }, \"type\" : \"SequenceInterval\" }, \"sequence_id\" : \"refseq:NC_000001.10\" , \"type\" : \"SequenceLocation\" }, \"variantType\" : \"SNP\" } } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"variantInternalId\" : \"GRCh37-1-55505652-G-A\" , \"variation\" : { \"location\" : { \"interval\" : { \"end\" : { \"type\" : \"Number\" , \"value\" : 5505653 }, \"start\" : { \"type\" : \"Number\" , \"value\" : 5505652 }, \"type\" : \"SequenceInterval\" }, \"sequence_id\" : \"refseq:NC_000001.10\" , \"type\" : \"SequenceLocation\" }, \"state\" : { \"sequence\" : \"A\" , \"type\" : \"SequenceState\" }, \"type\" : \"Allele\" } } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"frequencyInPopulations\" : [ { \"frequencies\" : [ { \"alleleFrequency\" : 2.939e-05 , \"population\" : \"European (non-Finish)\" }, { \"alleleFrequency\" : 0 , \"population\" : \"Other\" } ], \"source\" : \"gnomaD Genomes\" , \"sourceReference\" : \"https://gnomad.broadinstitute.org/\" , \"version\" : \"v3.1.1\" }, { \"frequencies\" : [ { \"alleleFrequency\" : 9e-05 , \"population\" : \"Total\" }, { \"alleleFrequency\" : 6e-05 , \"population\" : \"European\" }, { \"alleleFrequency\" : 0 , \"population\" : \"African\" } ], \"source\" : \"ALFA\" , \"sourceReference\" : \"https://www.ncbi.nlm.nih.gov/snp/docs/gsr/alfa/\" , \"version\" : \"20201027095038\" } ], \"identifiers\" : { \"clinVarIds\" : [ \"434136\" , \"VCV000440707.6\" ], \"genomicHGVSId\" : \"NC_000001.11:g.55039979G>A\" , \"proteinHGVSIds\" : [ \"NP_777596.2:p.Glu48Lys\" ], \"transcriptHGVSIds\" : [ \"NM_174936.4:c.142G>A\" ], \"variantAlternativeIds\" : [ \"dbSNP:rs3975092470\" , \"ClinGen: CA340482854\" ] }, \"molecularAttributes\" : { \"aminoacidChanges\" : [ \"E48K\" ], \"geneIds\" : [ \"PCSK9\" , \"LRG_275\" ], \"molecularEffects\" : [ { \"id\" : \"ENSGLOSSARY:0000150\" , \"label\" : \"Missense variant\" } ] }, \"variantInternalId\" : \"var123\" , \"variantLevelData\" : { \"clinicalInterpretations\" : [ { \"category\" : { \"id\" : \"MONDO:0000001\" , \"label\" : \"disease or disorder\" }, \"clinicalRelevance\" : \"pathogenic\" , \"conditionId\" : \"famchol1\" , \"effect\" : { \"id\" : \"MONDO:0007750\" , \"label\" : \"Familial hypercholesterolemia 1\" } }, { \"category\" : { \"id\" : \"MONDO:0000001\" , \"label\" : \"disease or disorder\" }, \"clinicalRelevance\" : \"uncertain significance\" , \"conditionId\" : \"famchol3\" , \"effect\" : { \"id\" : \"MONDO:0011369\" , \"label\" : \"hypercholesterolemia, autosomal dominant, 3\" } } ] }, \"variation\" : { \"alternateBases\" : \"A\" , \"location\" : { \"interval\" : { \"end\" : { \"type\" : \"Number\" , \"value\" : 55039980 }, \"start\" : { \"type\" : \"Number\" , \"value\" : 55039979 }, \"type\" : \"SequenceInterval\" }, \"sequence_id\" : \"refseq:NC_000001.11\" , \"type\" : \"SequenceLocation\" }, \"referenceBases\" : \"G\" , \"variantType\" : \"SNP\" } }","title":"Examples"},{"location":"schemas-md/individuals_defaultSchema/","text":"Term Description Type Properties Example Enum diseases List of disease(s) been diagnosed to the individual, defined by disease ontology ID(s), age of onset, stage and the presence of family history. array ageOfOnset , diseaseCode , familyHistory , notes , severity , stage NA NA ethnicity Definition of an ontology term. object id , label NA NA exposures NA array ageAtExposure , date , duration , exposureCode , unit , value NA NA geographicOrigin Definition of an ontology term. object id , label NA NA id Individual identifier (internal ID). string NA P0001 NA info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA interventionsOrProcedures NA array ageAtProcedure , bodySite , dateOfProcedure , procedureCode NA NA karyotypicSex The chromosomal sex of an individual represented from a selection of options. The values correspond to the ordinal values in the Phenopackets schema where: 0 - UNKNOWN_KARYOTYPE (Untyped or inconclusive karyotyping); 1 - XX (Female); 2 - XY (Male); 3 - XO (Single X chromosome only); 4 - XXY (Two X and one Y chromosome); 5 - XXX (Three X chromosomes); 6 - XXYY (Two X chromosomes and two Y chromosomes); 7 - XXXY (Three X chromosomes and one Y chromosome); 8 - XXXX (Four X chromosomes); 9 - XYY (One X and two Y chromosomes); 10 - OTHER_KARYOTYPE (None of the above types) string NA NA UNKNOWN_KARYOTYPE, XX, XY, XO, XXY, XXX, XXYY, XXXY, XXXX, XYY, OTHER_KARYOTYPE measures NA array assayCode , date , measurementValue , notes , observationMoment , procedure NA NA pedigrees NA array disease , id , members , numSubjects NA NA phenotypicFeatures NA array evidence , excluded , featureType , modifiers , notes , onset , resolution , severity NA NA sex Definition of an ontology term. object id , label NA NA treatments NA array ageAtOnset , cumulativeDose , doseIntervals , routeOfAdministration , treatmentCode NA NA Examples \u00b6 These are examples extracted directly from the GitHub repository . MIN MID { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"id\" : \"Ind001\" , \"sex\" : { \"id\" : \"NCIT:C16576\" , \"label\" : \"female\" } } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"diseases\" : [ { \"ageOfOnset\" : { \"ageGroup\" : { \"id\" : \"NCIT:C49685\" , \"label\" : \"Adult 18-65 Years Old\" } }, \"diseaseCode\" : { \"id\" : \"OMIM:164400\" , \"label\" : \"Spinocerebellar ataxia 1\" }, \"familyHistory\" : false , \"severity\" : { \"id\" : \"HP:0012829\" , \"label\" : \"Profound\" }, \"stage\" : { \"id\" : \"OGMS:0000119\" , \"label\" : \"acute onset\" } } ], \"ethnicity\" : { \"id\" : \"NCIT:C43851\" , \"label\" : \"European\" }, \"geographicOrigin\" : { \"id\" : \"GAZ:00002955\" , \"label\" : \"Slovenia\" }, \"id\" : \"Ind001\" , \"measures\" : [ { \"assayCode\" : { \"id\" : \"LOINC:26515-7\" , \"label\" : \"Platelets [#/volume] in Blood\" }, \"date\" : \"2017-05-03\" , \"measurementValue\" : { \"units\" : { \"id\" : \"NCIT:C103452\" , \"label\" : \"Per Milliliter\" }, \"value\" : 55345 }, \"observationMoment\" : { \"age\" : { \"iso8601duration\" : \"P55Y8M12D\" } } } ], \"sex\" : { \"id\" : \"NCIT:C16576\" , \"label\" : \"female\" } }","title":"Individuals"},{"location":"schemas-md/individuals_defaultSchema/#examples","text":"These are examples extracted directly from the GitHub repository . MIN MID { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"id\" : \"Ind001\" , \"sex\" : { \"id\" : \"NCIT:C16576\" , \"label\" : \"female\" } } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"diseases\" : [ { \"ageOfOnset\" : { \"ageGroup\" : { \"id\" : \"NCIT:C49685\" , \"label\" : \"Adult 18-65 Years Old\" } }, \"diseaseCode\" : { \"id\" : \"OMIM:164400\" , \"label\" : \"Spinocerebellar ataxia 1\" }, \"familyHistory\" : false , \"severity\" : { \"id\" : \"HP:0012829\" , \"label\" : \"Profound\" }, \"stage\" : { \"id\" : \"OGMS:0000119\" , \"label\" : \"acute onset\" } } ], \"ethnicity\" : { \"id\" : \"NCIT:C43851\" , \"label\" : \"European\" }, \"geographicOrigin\" : { \"id\" : \"GAZ:00002955\" , \"label\" : \"Slovenia\" }, \"id\" : \"Ind001\" , \"measures\" : [ { \"assayCode\" : { \"id\" : \"LOINC:26515-7\" , \"label\" : \"Platelets [#/volume] in Blood\" }, \"date\" : \"2017-05-03\" , \"measurementValue\" : { \"units\" : { \"id\" : \"NCIT:C103452\" , \"label\" : \"Per Milliliter\" }, \"value\" : 55345 }, \"observationMoment\" : { \"age\" : { \"iso8601duration\" : \"P55Y8M12D\" } } } ], \"sex\" : { \"id\" : \"NCIT:C16576\" , \"label\" : \"female\" } }","title":"Examples"},{"location":"schemas-md/runs_defaultSchema/","text":"Term Description Type Properties Example Enum biosampleId Reference to the biosample ID. string NA 008dafdd-a3d1-4801-8c0a-8714e2b58e48 NA id Run ID. string NA SRR10903401 NA individualId Reference to the individual ID. string NA TCGA-AO-A0JJ NA info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA libraryLayout Ontology value for the library layout e.g \"PAIRED\", \"SINGLE\" #todo add Ontology name? string NA NA PAIRED, SINGLE librarySelection Selection method for library preparation, e.g \"RANDOM\", \"RT-PCR\" string NA RANDOM, RT-PCR NA librarySource Definition of an ontology term. object id , label NA NA libraryStrategy Library strategy, e.g. \"WGS\" string NA WGS NA platform General platform technology label. It SHOULD be a subset of the platformModel and used only for query convenience, e.g. \"return everything sequenced with Illimuna\", where the specific model is not relevant string NA Illumina, Oxford Nanopore, Affymetrix NA platformModel Definition of an ontology term. object id , label NA NA runDate Date at which the experiment was performed. string NA 2021-10-18 NA Examples \u00b6 These are examples extracted directly from the GitHub repository . MIN MAX { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"biosampleId\" : \"008dafdd-a3d1-4801-8c0a-8714e2b58e48\" , \"id\" : \"SRR10903401\" , \"runDate\" : \"2021-10-18\" } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"biosampleId\" : \"008dafdd-a3d1-4801-8c0a-8714e2b58e48\" , \"id\" : \"SRR10903401\" , \"individualId\" : \"TCGA-AO-A0JJ\" , \"libraryLayout\" : \"PAIRED\" , \"librarySelection\" : \"RANDOM\" , \"librarySource\" : { \"id\" : \"GENEPIO:0001966\" , \"label\" : \"genomic source\" }, \"libraryStrategy\" : \"WGS\" , \"platform\" : \"Illumina\" , \"platformModel\" : { \"id\" : \"OBI:0002048\" , \"label\" : \"Illumina HiSeq 3000\" }, \"runDate\" : \"2021-10-18\" }","title":"Runs"},{"location":"schemas-md/runs_defaultSchema/#examples","text":"These are examples extracted directly from the GitHub repository . MIN MAX { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"biosampleId\" : \"008dafdd-a3d1-4801-8c0a-8714e2b58e48\" , \"id\" : \"SRR10903401\" , \"runDate\" : \"2021-10-18\" } { \"$schema\" : \"https://json-schema.org/draft/2020-12/schema\" , \"biosampleId\" : \"008dafdd-a3d1-4801-8c0a-8714e2b58e48\" , \"id\" : \"SRR10903401\" , \"individualId\" : \"TCGA-AO-A0JJ\" , \"libraryLayout\" : \"PAIRED\" , \"librarySelection\" : \"RANDOM\" , \"librarySource\" : { \"id\" : \"GENEPIO:0001966\" , \"label\" : \"genomic source\" }, \"libraryStrategy\" : \"WGS\" , \"platform\" : \"Illumina\" , \"platformModel\" : { \"id\" : \"OBI:0002048\" , \"label\" : \"Illumina HiSeq 3000\" }, \"runDate\" : \"2021-10-18\" }","title":"Examples"},{"location":"schemas-md/obj/Age/","text":"Term Description Type Properties Example Enum Age Age value definition. Provenance: GA4GH Phenopackets v2 Age object iso8601duration NA NA","title":"Age"},{"location":"schemas-md/obj/AgeRange/","text":"Term Description Type Properties Example Enum AgeRange Age range definition. Provenance: GA4GH Phenopackets v2 AgeRange object end , start NA NA","title":"AgeRange"},{"location":"schemas-md/obj/Allele/","text":"Term Description Type Properties Example Enum Allele The state of a molecule at a Location. object _id , location , state , type NA NA","title":"Allele"},{"location":"schemas-md/obj/Complex%20Value/","text":"Term Description Type Properties Example Enum Complex Value Definition of a complex value class. Provenance: GA4GH Phenopackets v2 TypedQuantity object typedQuantities NA NA","title":"Complex Value"},{"location":"schemas-md/obj/CopyNumber/","text":"Term Description Type Properties Example Enum CopyNumber NA allOf VRS definition for CopyNumber NA NA","title":"CopyNumber"},{"location":"schemas-md/obj/GestationalAge/","text":"Term Description Type Properties Example Enum GestationalAge Gestational age (or menstrual age) is the time elapsed between the first day of the last normal menstrual period and the day of delivery. The first day of the last menstrual period occurs approximately 2 weeks before ovulation and approximately 3 weeks before implantation of the blastocyst. Because most women know when their last period began but not when ovulation occurred, this definition traditionally has been used when estimating the expected date of delivery. In contrast, chronological age (or postnatal age) is the time elapsed after birth. Provenance: Phenopackets v2 object days , weeks NA NA","title":"GestationalAge"},{"location":"schemas-md/obj/Haplotype/","text":"Term Description Type Properties Example Enum Haplotype A set of non-overlapping Allele members that co-occur on the same molecule. object _id , members , type NA NA","title":"Haplotype"},{"location":"schemas-md/obj/LegacyVariation/","text":"Term Description Type Properties Example Enum LegacyVariation NA object alternateBases , location , referenceBases , variantType NA NA","title":"LegacyVariation"},{"location":"schemas-md/obj/MolecularVariation/","text":"Term Description Type Properties Example Enum MolecularVariation NA oneOf Allele , Haplotype NA NA","title":"MolecularVariation"},{"location":"schemas-md/obj/SystemicVariation/","text":"Term Description Type Properties Example Enum SystemicVariation NA oneOf CopyNumber NA NA","title":"SystemicVariation"},{"location":"schemas-md/obj/TimeInterval/","text":"Term Description Type Properties Example Enum TimeInterval Time interval with start and end defined as ISO8601 time stamps. object end , start NA NA","title":"TimeInterval"},{"location":"schemas-md/obj/Value/","text":"Term Description Type Properties Example Enum Value NA oneOf Quantity , ontologyTerm NA NA","title":"Value"},{"location":"schemas-md/obj/affected/","text":"Term Description Type Properties Example Enum affected Is the individual affected by the disease in the pedigree? boolean NA NA NA","title":"Affected"},{"location":"schemas-md/obj/ageAtExposure/","text":"Term Description Type Properties Example Enum ageAtExposure Age value definition. Provenance: GA4GH Phenopackets v2 Age object iso8601duration NA NA","title":"ageAtExposure"},{"location":"schemas-md/obj/ageAtOnset/","text":"Term Description Type Properties Example Enum ageAtOnset Age value definition. Provenance: GA4GH Phenopackets v2 Age object iso8601duration NA NA","title":"ageAtOnset"},{"location":"schemas-md/obj/ageAtProcedure/","text":"Term Description Type Properties Example Enum ageAtProcedure NA oneOf Age , AgeRange , GestationalAge , TimeInterval NA NA","title":"ageAtProcedure"},{"location":"schemas-md/obj/ageOfOnset/","text":"Term Description Type Properties Example Enum ageOfOnset NA oneOf Age , AgeRange , GestationalAge , TimeInterval NA NA","title":"ageOfOnset"},{"location":"schemas-md/obj/ageRange/","text":"Term Description Type Properties Example Enum ageRange Age range definition. Provenance: GA4GH Phenopackets v2 AgeRange object end , start NA NA","title":"ageRange"},{"location":"schemas-md/obj/aligner/","text":"Term Description Type Properties Example Enum aligner Reference to mapping/alignment software string NA bwa-0.7.8 NA","title":"Aligner"},{"location":"schemas-md/obj/alleleFrequency/","text":"Term Description Type Properties Example Enum alleleFrequency Allele frequency between 0 and 1. number NA 3.186e-05 NA","title":"alleleFrequency"},{"location":"schemas-md/obj/alleleOrigin/","text":"Term Description Type Properties Example Enum alleleOrigin Definition of an ontology term. object id , label NA NA","title":"alleleOrigin"},{"location":"schemas-md/obj/alternateBases/","text":"Term Description Type Properties Example Enum alternateBases Alternate bases for this variant (starting from start ). * Accepted values: IUPAC codes for nucleotides (e.g. https://www.bioinformatics.org/sms/iupac.html ). N is a wildcard, that denotes the position of any base, and can beused as a standalone base of any type or within a partially knownsequence. As example, a query of ANNT the Ns can take take any form of[ACGT] and will match ANNT , ACNT , ACCT , ACGT ... and so forth. an empty value is used in the case of deletions with the maximally trimmed, deleted sequence being indicated in ReferenceBases Categorical variant queries, e.g. such not being represented through sequence & position, make use of the variantType parameter. * Either alternateBases or variantType is required. string NA T, G, N, AG, NA","title":"alternateBases"},{"location":"schemas-md/obj/aminoacidChanges/","text":"Term Description Type Properties Example Enum aminoacidChanges Lisf of change(s) at aminoacid level for protein affecting variants. array NA [\"V304*\"] NA","title":"aminoacidChanges"},{"location":"schemas-md/obj/analysisDate/","text":"Term Description Type Properties Example Enum analysisDate Date at which analysis was performed. string NA 2021-10-17 NA","title":"analysisDate"},{"location":"schemas-md/obj/analysisId/","text":"Term Description Type Properties Example Enum analysisId Reference to the bioinformatics analysis ID ( analysis.id ) string NA pgxcs-kftvldsu NA","title":"analysisId"},{"location":"schemas-md/obj/annotatedWith/","text":"Term Description Type Properties Example Enum annotatedWith NA object toolName , toolReferences , version NA NA","title":"annotatedWith"},{"location":"schemas-md/obj/assayCode/","text":"Term Description Type Properties Example Enum assayCode Definition of an ontology term. object id , label NA NA","title":"assayCode"},{"location":"schemas-md/obj/availability/","text":"Term Description Type Properties Example Enum availability data availability boolean NA NA NA","title":"Availability"},{"location":"schemas-md/obj/availabilityCount/","text":"Term Description Type Properties Example Enum availabilityCount count of individuals with data available integer NA NA NA","title":"availabilityCount"},{"location":"schemas-md/obj/biosampleId/","text":"Term Description Type Properties Example Enum biosampleId Reference to the biosample ID. string NA 008dafdd-a3d1-4801-8c0a-8714e2b58e48 NA","title":"biosampleId"},{"location":"schemas-md/obj/biosampleStatus/","text":"Term Description Type Properties Example Enum biosampleStatus Definition of an ontology term. object id , label NA NA","title":"biosampleStatus"},{"location":"schemas-md/obj/bodySite/","text":"Term Description Type Properties Example Enum bodySite Definition of an ontology term. object id , label NA NA","title":"bodySite"},{"location":"schemas-md/obj/caseLevelData/","text":"Term Description Type Properties Example Enum caseLevelData caseLevelData reports about the variation instances observed in individual analyses. array alleleOrigin , analysisId , biosampleId , clinicalInterpretations , id , individualId , phenotypicEffects , runId , zygosity NA NA","title":"caseLevelData"},{"location":"schemas-md/obj/category/","text":"Term Description Type Properties Example Enum category Definition of an ontology term. object id , label NA NA","title":"Category"},{"location":"schemas-md/obj/clinicalInterpretations/","text":"Term Description Type Properties Example Enum clinicalInterpretations NA array annotatedWith , category , clinicalRelevance , conditionId , effect , evidenceType NA NA","title":"clinicalInterpretations"},{"location":"schemas-md/obj/clinicalRelevance/","text":"Term Description Type Properties Example Enum clinicalRelevance A value from the five-tiered classification from the American College of Medical Genetics (ACMG) designed to describe the likelihood that a genomic sequence variant is causative of an inherited disease. (NCIT:C168798). string NA pathogenic benign, likely benign, uncertain significance, likely pathogenic, pathogenic","title":"clinicalRelevance"},{"location":"schemas-md/obj/clinvarVariantId/","text":"Term Description Type Properties Example Enum clinvarVariantId ClinVar variant id. Other id values used by ClinVar can be added to variantAlternativeIds string NA clinvar:12345, 9325 NA","title":"clinvarVariantId"},{"location":"schemas-md/obj/cohortDataTypes/","text":"Term Description Type Properties Example Enum cohortDataTypes Type of information. Preferably values from Genomics Cohorts Knowledge Ontology (GeCKO) or others when GeCKO is not applicable. array id , label [{\"id\": \"OGMS:0000015\", \"label\": \"clinical history\"}, {\"id\": \"OBI:0000070\", \"label\": \"genotyping assay\"}, {\"id\": \"OMIABIS:0000060\", \"label\": \"survey data\"}] NA","title":"cohortDataTypes"},{"location":"schemas-md/obj/cohortDesign/","text":"Term Description Type Properties Example Enum cohortDesign Definition of an ontology term. object id , label NA NA","title":"cohortDesign"},{"location":"schemas-md/obj/cohortSize/","text":"Term Description Type Properties Example Enum cohortSize Count of unique Individuals in cohort (individuals meeting criteria for \u00b4user-defined\u00b4 cohorts). If not previously known, it could be calculated by counting the individuals in the cohort. integer NA 14765, 20000 NA","title":"cohortSize"},{"location":"schemas-md/obj/cohortType/","text":"Term Description Type Properties Example Enum cohortType Cohort type by its definition. If a cohort is declared \u00b4study-defined\u00b4 or \u00b4beacon-defined\u00b4 criteria are to be entered in cohort_inclusion_criteria; if a cohort is declared \u2018user-defined' cohort_inclusion_criteria could be automatically populated from the parameters used to perform the query. string NA NA study-defined, beacon-defined, user-defined","title":"cohortType"},{"location":"schemas-md/obj/collectionDate/","text":"Term Description Type Properties Example Enum collectionDate Date of biosample collection in ISO8601 format. string NA 2021-04-23 NA","title":"collectionDate"},{"location":"schemas-md/obj/collectionEvents/","text":"Term Description Type Properties Example Enum collectionEvents TBD array eventAgeRange , eventCases , eventControls , eventDataTypes , eventDate , eventDiseases , eventEthnicities , eventGenders , eventLocations , eventNum , eventPhenotypes , eventSize , eventTimeline NA NA","title":"collectionEvents"},{"location":"schemas-md/obj/collectionMoment/","text":"Term Description Type Properties Example Enum collectionMoment Individual's or cell cullture age at the time of sample collection in the ISO8601 duration format P[n]Y[n]M[n]DT[n]H[n]M[n]S . string NA P32Y6M1D, P7D NA","title":"collectionMoment"},{"location":"schemas-md/obj/conditionId/","text":"Term Description Type Properties Example Enum conditionId Internal identifier of the phenotype or clinical effect. string NA disease1, phen2234 NA","title":"conditionId"},{"location":"schemas-md/obj/createDateTime/","text":"Term Description Type Properties Example Enum createDateTime Time in date-time ISO8601 string format. string NA 1999-08-05T17:21:00+01:00, 2002-09-21T02:37:00-08:00 NA","title":"createDateTime"},{"location":"schemas-md/obj/cumulativeDose/","text":"Term Description Type Properties Example Enum cumulativeDose Definition of a quantity class. Provenance: GA4GH Phenopackets v2 Quantity object referenceRange , unit , value NA NA","title":"cumulativeDose"},{"location":"schemas-md/obj/dataUseConditions/","text":"Term Description Type Properties Example Enum dataUseConditions Data use conditions object duoDataUse NA NA","title":"dataUseConditions"},{"location":"schemas-md/obj/date/","text":"Term Description Type Properties Example Enum date Date of measurement. Addition compared to Phenopackets model. string NA NA NA","title":"Date"},{"location":"schemas-md/obj/dateOfProcedure/","text":"Term Description Type Properties Example Enum dateOfProcedure Date of procedure, in ISO8601 format string NA 2010-07-10 NA","title":"dateOfProcedure"},{"location":"schemas-md/obj/description/","text":"Term Description Type Properties Example Enum description Description of the dataset string NA This dataset provides examples of the actual data in this Beacon instance. NA","title":"Description"},{"location":"schemas-md/obj/diagnosticMarkers/","text":"Term Description Type Properties Example Enum diagnosticMarkers Clinically relevant biomarkers. RECOMMENDED. array id , label NA NA","title":"diagnosticMarkers"},{"location":"schemas-md/obj/disease/","text":"Term Description Type Properties Example Enum disease Diseases diagnosed e.g. to an individual, defined by diseaseID, age of onset, stage, level of severity, outcome and the presence of family history. Similarities to GA4GH Phenopackets v2 Disease object ageOfOnset , diseaseCode , familyHistory , notes , severity , stage NA NA","title":"Disease"},{"location":"schemas-md/obj/diseaseCode/","text":"Term Description Type Properties Example Enum diseaseCode Definition of an ontology term. object id , label NA NA","title":"diseaseCode"},{"location":"schemas-md/obj/diseaseConditions/","text":"Term Description Type Properties Example Enum diseaseConditions Diseases in cohort inclusion criteria array ageOfOnset , diseaseCode , familyHistory , notes , severity , stage NA NA","title":"diseaseConditions"},{"location":"schemas-md/obj/diseases/","text":"Term Description Type Properties Example Enum diseases List of disease(s) been diagnosed to the individual, defined by disease ontology ID(s), age of onset, stage and the presence of family history. array ageOfOnset , diseaseCode , familyHistory , notes , severity , stage NA NA","title":"Diseases"},{"location":"schemas-md/obj/distribution/","text":"Term Description Type Properties Example Enum distribution List of categories and results or counts for each category. object [{\"genders\": {\"female\": \"51\", \"male\": \"50\"}}] NA","title":"Distribution"},{"location":"schemas-md/obj/doseIntervals/","text":"Term Description Type Properties Example Enum doseIntervals NA array interval , quantity , scheduleFrequency NA NA","title":"doseIntervals"},{"location":"schemas-md/obj/duoDataUse/","text":"Term Description Type Properties Example Enum duoDataUse duoDataUse array id , label , modifiers , version [{\"id\": \"DUO:0000007\", \"label\": \"disease specific research\", \"version\": \"17-07-2016\"}] NA","title":"duoDataUse"},{"location":"schemas-md/obj/duration/","text":"Term Description Type Properties Example Enum duration Exposure duration in ISO8601 format string NA P32Y6M1D NA","title":"Duration"},{"location":"schemas-md/obj/effect/","text":"Term Description Type Properties Example Enum effect Definition of an ontology term. object id , label NA NA","title":"Effect"},{"location":"schemas-md/obj/end/","text":"Term Description Type Properties Example Enum end Age value definition. Provenance: GA4GH Phenopackets v2 Age object iso8601duration NA NA","title":"End"},{"location":"schemas-md/obj/ethnicities/","text":"Term Description Type Properties Example Enum ethnicities Ethnias in cohort inclusion criteria array id , label NA NA","title":"Ethnicities"},{"location":"schemas-md/obj/ethnicity/","text":"Term Description Type Properties Example Enum ethnicity Definition of an ontology term. object id , label NA NA","title":"Ethnicity"},{"location":"schemas-md/obj/eventAgeRange/","text":"Term Description Type Properties Example Enum eventAgeRange Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventAgeRange"},{"location":"schemas-md/obj/eventCases/","text":"Term Description Type Properties Example Enum eventCases count of cases integer NA 543, 20 NA","title":"eventCases"},{"location":"schemas-md/obj/eventControls/","text":"Term Description Type Properties Example Enum eventControls count of controls integer NA 1000, 22 NA","title":"eventControls"},{"location":"schemas-md/obj/eventDataTypes/","text":"Term Description Type Properties Example Enum eventDataTypes Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventDataTypes"},{"location":"schemas-md/obj/eventDate/","text":"Term Description Type Properties Example Enum eventDate date of collection event/data point string NA 2018-10-01T13:23:45Z, 2019-04-23T09:11:13Z, 2017-01-17T20:33:40Z NA","title":"eventDate"},{"location":"schemas-md/obj/eventDiseases/","text":"Term Description Type Properties Example Enum eventDiseases Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventDiseases"},{"location":"schemas-md/obj/eventEthnicities/","text":"Term Description Type Properties Example Enum eventEthnicities Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventEthnicities"},{"location":"schemas-md/obj/eventGenders/","text":"Term Description Type Properties Example Enum eventGenders Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventGenders"},{"location":"schemas-md/obj/eventLocations/","text":"Term Description Type Properties Example Enum eventLocations Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventLocations"},{"location":"schemas-md/obj/eventNum/","text":"Term Description Type Properties Example Enum eventNum cardinality of the collection event / data point in a series integer NA 1, 2, 3, 4 NA","title":"eventNum"},{"location":"schemas-md/obj/eventPhenotypes/","text":"Term Description Type Properties Example Enum eventPhenotypes Aggregated information of geographic location obtained from individual level info in database. object availability , availabilityCount , distribution NA NA","title":"eventPhenotypes"},{"location":"schemas-md/obj/eventSize/","text":"Term Description Type Properties Example Enum eventSize Count of individuals in cohort at data point (for \u00b4user-defined\u00b4 cohorts, this is individuals meeting criteria) obtained from individual level info in database. integer NA 1543, 42 NA","title":"eventSize"},{"location":"schemas-md/obj/eventTimeline/","text":"Term Description Type Properties Example Enum eventTimeline Aggregated information of dates of visit/diagnostic/inclusion in study obtained from individual level info in database. Will coincide with collection event date for multi-time object end , start NA NA","title":"eventTimeline"},{"location":"schemas-md/obj/evidence/","text":"Term Description Type Properties Example Enum evidence Definition of an evidence class. Provenance: GA4GH Phenopackets v2 Evidence object evidenceCode , reference NA NA","title":"Evidence"},{"location":"schemas-md/obj/evidenceCode/","text":"Term Description Type Properties Example Enum evidenceCode Definition of an ontology term. object id , label NA NA","title":"evidenceCode"},{"location":"schemas-md/obj/evidenceType/","text":"Term Description Type Properties Example Enum evidenceType Definition of an ontology term. object id , label NA NA","title":"evidenceType"},{"location":"schemas-md/obj/excluded/","text":"Term Description Type Properties Example Enum excluded (from Phenopackets v.2) Flag to indicate whether the disease was observed or not. Default is \u2018false\u2019, in other words the disease was observed. Therefore it is only required in cases to indicate that the disease was looked for, but found to be absent. More formally, this modifier indicates the logical negation of the OntologyClass used in the 'featureType' field. CAUTION It is imperative to check this field for correct interpretation of the disease! boolean NA NA NA","title":"Excluded"},{"location":"schemas-md/obj/exclusionCriteria/","text":"Term Description Type Properties Example Enum exclusionCriteria Criteria used for defining the cohort. It is assumed that all cohort participants will match or NOT match such criteria. object ageRange , diseaseConditions , ethnicities , genders , locations , phenotypicConditions NA NA","title":"exclusionCriteria"},{"location":"schemas-md/obj/exposureCode/","text":"Term Description Type Properties Example Enum exposureCode Definition of an ontology term. object id , label NA NA","title":"exposureCode"},{"location":"schemas-md/obj/exposures/","text":"Term Description Type Properties Example Enum exposures NA array ageAtExposure , date , duration , exposureCode , unit , value NA NA","title":"Exposures"},{"location":"schemas-md/obj/externalUrl/","text":"Term Description Type Properties Example Enum externalUrl URL to an external system providing more dataset information (RFC 3986 format). string NA example.org/wiki/Main_Page NA","title":"externalUrl"},{"location":"schemas-md/obj/familyHistory/","text":"Term Description Type Properties Example Enum familyHistory Boolean indicating determined or self-reported presence of family history of the disease. boolean NA 1 NA","title":"familyHistory"},{"location":"schemas-md/obj/featureClass/","text":"Term Description Type Properties Example Enum featureClass Definition of an ontology term. object id , label NA NA","title":"featureClass"},{"location":"schemas-md/obj/featureID/","text":"Term Description Type Properties Example Enum featureID Definition of an ontology term. object id , label NA NA","title":"featureID"},{"location":"schemas-md/obj/featureType/","text":"Term Description Type Properties Example Enum featureType Definition of an ontology term. object id , label NA NA","title":"featureType"},{"location":"schemas-md/obj/frequencies/","text":"Term Description Type Properties Example Enum frequencies NA array alleleFrequency , population NA NA","title":"Frequencies"},{"location":"schemas-md/obj/frequencyInPopulations/","text":"Term Description Type Properties Example Enum frequencyInPopulations NA array frequencies , source , sourceReference , version NA NA","title":"frequencyInPopulations"},{"location":"schemas-md/obj/genders/","text":"Term Description Type Properties Example Enum genders Gender(s) in cohort inclusion criteria array id , label NA NA","title":"Genders"},{"location":"schemas-md/obj/geneIds/","text":"Term Description Type Properties Example Enum geneIds NA array NA [\"ACE2\"] , [\"BRCA1\"] NA","title":"geneIds"},{"location":"schemas-md/obj/genomicFeatures/","text":"Term Description Type Properties Example Enum genomicFeatures List of Genomic feature(s) affected by the variant. array featureClass , featureID NA NA","title":"genomicFeatures"},{"location":"schemas-md/obj/genomicHGVSId/","text":"Term Description Type Properties Example Enum genomicHGVSId HGVSId descriptor. string NA NC_000017.11:g.43057063G>A NA","title":"genomicHGVSId"},{"location":"schemas-md/obj/geographicOrigin/","text":"Term Description Type Properties Example Enum geographicOrigin Definition of an ontology term. object id , label NA NA","title":"geographicOrigin"},{"location":"schemas-md/obj/histologicalDiagnosis/","text":"Term Description Type Properties Example Enum histologicalDiagnosis Definition of an ontology term. object id , label NA NA","title":"histologicalDiagnosis"},{"location":"schemas-md/obj/id/","text":"Term Description Type Properties Example Enum id A CURIE identifier for an ontology term. string NA ga4gh:GA.01234abcde, DUO:0000004, orcid:0000-0003-3463-0775, PMID:15254584 NA","title":"Id"},{"location":"schemas-md/obj/identifiers/","text":"Term Description Type Properties Example Enum identifiers NA object clinvarVariantId , genomicHGVSId , proteinHGVSIds , transcriptHGVSIds , variantAlternativeIds NA NA","title":"Identifiers"},{"location":"schemas-md/obj/inclusionCriteria/","text":"Term Description Type Properties Example Enum inclusionCriteria Criteria used for defining the cohort. It is assumed that all cohort participants will match or NOT match such criteria. object ageRange , diseaseConditions , ethnicities , genders , locations , phenotypicConditions NA NA","title":"inclusionCriteria"},{"location":"schemas-md/obj/individualId/","text":"Term Description Type Properties Example Enum individualId Reference to the individual ID. string NA TCGA-AO-A0JJ NA","title":"individualId"},{"location":"schemas-md/obj/info/","text":"Term Description Type Properties Example Enum info Placeholder to allow the Beacon to return any additional information that is necessary or could be of interest in relation to the query or the entry returned. It is recommended to encapsulate additional informations in this attribute instead of directly adding attributes at the same level than the others in order to avoid collision in the names of attributes in future versions of the specification. object NA NA NA","title":"Info"},{"location":"schemas-md/obj/interval/","text":"Term Description Type Properties Example Enum interval Time interval with start and end defined as ISO8601 time stamps. object end , start NA NA","title":"Interval"},{"location":"schemas-md/obj/interventionsOrProcedures/","text":"Term Description Type Properties Example Enum interventionsOrProcedures NA array ageAtProcedure , bodySite , dateOfProcedure , procedureCode NA NA","title":"interventionsOrProcedures"},{"location":"schemas-md/obj/iso8601duration/","text":"Term Description Type Properties Example Enum iso8601duration Represents age as a ISO8601 duration (e.g., P40Y10M05D). string NA P32Y6M1D NA","title":"Iso8601duration"},{"location":"schemas-md/obj/karyotypicSex/","text":"Term Description Type Properties Example Enum karyotypicSex The chromosomal sex of an individual represented from a selection of options. The values correspond to the ordinal values in the Phenopackets schema where: 0 - UNKNOWN_KARYOTYPE (Untyped or inconclusive karyotyping); 1 - XX (Female); 2 - XY (Male); 3 - XO (Single X chromosome only); 4 - XXY (Two X and one Y chromosome); 5 - XXX (Three X chromosomes); 6 - XXYY (Two X chromosomes and two Y chromosomes); 7 - XXXY (Three X chromosomes and one Y chromosome); 8 - XXXX (Four X chromosomes); 9 - XYY (One X and two Y chromosomes); 10 - OTHER_KARYOTYPE (None of the above types) string NA NA UNKNOWN_KARYOTYPE, XX, XY, XO, XXY, XXX, XXYY, XXXY, XXXX, XYY, OTHER_KARYOTYPE","title":"karyotypicSex"},{"location":"schemas-md/obj/label/","text":"Term Description Type Properties Example Enum label The text that describes the term. By default it could be the preferred text of the term, but is it acceptable to customize it for a clearer description and understanding of the term in an specific context. string NA NA NA","title":"Label"},{"location":"schemas-md/obj/libraryLayout/","text":"Term Description Type Properties Example Enum libraryLayout Ontology value for the library layout e.g \"PAIRED\", \"SINGLE\" #todo add Ontology name? string NA NA PAIRED, SINGLE","title":"libraryLayout"},{"location":"schemas-md/obj/librarySelection/","text":"Term Description Type Properties Example Enum librarySelection Selection method for library preparation, e.g \"RANDOM\", \"RT-PCR\" string NA RANDOM, RT-PCR NA","title":"librarySelection"},{"location":"schemas-md/obj/librarySource/","text":"Term Description Type Properties Example Enum librarySource Definition of an ontology term. object id , label NA NA","title":"librarySource"},{"location":"schemas-md/obj/libraryStrategy/","text":"Term Description Type Properties Example Enum libraryStrategy Library strategy, e.g. \"WGS\" string NA WGS NA","title":"libraryStrategy"},{"location":"schemas-md/obj/location/","text":"Term Description Type Properties Example Enum location NA oneOf CURIE , Location NA NA","title":"Location"},{"location":"schemas-md/obj/locations/","text":"Term Description Type Properties Example Enum locations Geographic location(s) in cohort inclusion criteria array id , label NA NA","title":"Locations"},{"location":"schemas-md/obj/measurementValue/","text":"Term Description Type Properties Example Enum measurementValue NA oneOf Complex Value , Value NA NA","title":"measurementValue"},{"location":"schemas-md/obj/measurements/","text":"Term Description Type Properties Example Enum measurements List of measurements of the sample. array assayCode , date , measurementValue , notes , observationMoment , procedure NA NA","title":"Measurements"},{"location":"schemas-md/obj/measures/","text":"Term Description Type Properties Example Enum measures NA array assayCode , date , measurementValue , notes , observationMoment , procedure NA NA","title":"Measures"},{"location":"schemas-md/obj/memberId/","text":"Term Description Type Properties Example Enum memberId Identifier of the individual. The individual could be part of the same Beacon datasets or not, in which case the information here is meant to complete the pedigree. If the individual is also in the dataset use that Individual ID. If it is not the in the dataset, use a non-collading ID, e.g. concatenating the Pedigree ID with a local ID, similarly to the example 'Pedigree1001-m1'. string NA Pedigree1001-m1, Ind0012122 NA","title":"memberId"},{"location":"schemas-md/obj/members/","text":"Term Description Type Properties Example Enum members List of members of the pedigree. If the current pedigree definition is attached to the proband, it contains the whole list of pedigree members, including the proband. If the definition is attached to an individual different than the proband, it only contains two entries: one that describes that member, e.g. the proband mother or father, and one that points to the proband. array affected , memberId , role NA NA","title":"Members"},{"location":"schemas-md/obj/modifiers/","text":"Term Description Type Properties Example Enum modifiers For instance one or more terms from HPO Clinical Modifier (HP:0012823). This subontology is designed to provide terms to characterize and specify the phenotypic abnormalities defined in the Phenotypic abnormality subontology, with respect to severity, laterality, age of onset, and other aspects. [ HPO:probinson ] array id , label [{\"id\": \"HP:0032500\", \"label\": \"Exacerbated by tobacco use\"}, {\"id\": \"HP:4000053\", \"label\": \"Displaced fracture\"}] NA","title":"Modifiers"},{"location":"schemas-md/obj/molecularAttributes/","text":"Term Description Type Properties Example Enum molecularAttributes NA object aminoacidChanges , geneIds , genomicFeatures , molecularEffects NA NA","title":"molecularAttributes"},{"location":"schemas-md/obj/molecularEffects/","text":"Term Description Type Properties Example Enum molecularEffects Ontology term that includes describes the class of molecular consequence generated by the variant. Values from Ensembl Glossary Variant Consequence (ENSGLOSSARY:0000134 ontology branch) are recommended, e.g. Stop gained, Missense variant, Coding sequence variant. array id , label [{\"id\": \"ENSGLOSSARY:0000143\", \"label\": \"Stop gained\"}, {\"id\": \"ENSGLOSSARY:0000150\", \"label\": \"Missense variant\"}] NA","title":"molecularEffects"},{"location":"schemas-md/obj/name/","text":"Term Description Type Properties Example Enum name Name of the dataset string NA Dataset with synthetic data NA","title":"Name"},{"location":"schemas-md/obj/notes/","text":"Term Description Type Properties Example Enum notes Unstructured text to describe additional properties of this disease instance. string NA Some free text NA","title":"Notes"},{"location":"schemas-md/obj/numSubjects/","text":"Term Description Type Properties Example Enum numSubjects Total number of subjects in pedigree. integer NA 10 NA","title":"numSubjects"},{"location":"schemas-md/obj/observationMoment/","text":"Term Description Type Properties Example Enum observationMoment NA oneOf Age , AgeRange , GestationalAge , TimeInterval NA NA","title":"observationMoment"},{"location":"schemas-md/obj/obtentionProcedure/","text":"Term Description Type Properties Example Enum obtentionProcedure Class describing a clinical procedure or intervention. Provenance: GA4GH Phenopackets v2 Procedure object ageAtProcedure , bodySite , dateOfProcedure , procedureCode NA NA","title":"obtentionProcedure"},{"location":"schemas-md/obj/onset/","text":"Term Description Type Properties Example Enum onset NA oneOf Age , AgeRange , GestationalAge , TimeInterval NA NA","title":"Onset"},{"location":"schemas-md/obj/pathologicalStage/","text":"Term Description Type Properties Example Enum pathologicalStage Definition of an ontology term. object id , label NA NA","title":"pathologicalStage"},{"location":"schemas-md/obj/pathologicalTnmFinding/","text":"Term Description Type Properties Example Enum pathologicalTnmFinding Pathological TNM findings, if applicable, preferably as subclass of NCIT:C48698 - Cancer TNM Finding Category (NCIT:C48698). RECOMMENDED. array id , label [{\"id\": \"NCIT:C48725\", \"label\": \"T2a Stage Finding\"}, {\"id\": \"NCIT:C48709\", \"label\": \"N1c Stage Finding\"}, {\"id\": \"NCIT:C48699\", \"label\": \"M0 Stage Finding\"}] NA","title":"pathologicalTnmFinding"},{"location":"schemas-md/obj/pedigrees/","text":"Term Description Type Properties Example Enum pedigrees NA array disease , id , members , numSubjects NA NA","title":"Pedigrees"},{"location":"schemas-md/obj/phenotypicConditions/","text":"Term Description Type Properties Example Enum phenotypicConditions Phenotypic condition(s) in cohort inclusion criteria array evidence , excluded , featureType , modifiers , notes , onset , resolution , severity NA NA","title":"phenotypicConditions"},{"location":"schemas-md/obj/phenotypicEffects/","text":"Term Description Type Properties Example Enum phenotypicEffects NA array annotatedWith , category , clinicalRelevance , conditionId , effect , evidenceType NA NA","title":"phenotypicEffects"},{"location":"schemas-md/obj/phenotypicFeatures/","text":"Term Description Type Properties Example Enum phenotypicFeatures NA array evidence , excluded , featureType , modifiers , notes , onset , resolution , severity NA NA","title":"phenotypicFeatures"},{"location":"schemas-md/obj/pipelineName/","text":"Term Description Type Properties Example Enum pipelineName Analysis pipeline and version if a standardized pipeline was used string NA Pipeline-panel-0001-v1 NA","title":"pipelineName"},{"location":"schemas-md/obj/pipelineRef/","text":"Term Description Type Properties Example Enum pipelineRef Link to Analysis pipeline resource string NA doi.org/10.48511/workflowhub.workflow.111.1 NA","title":"pipelineRef"},{"location":"schemas-md/obj/platform/","text":"Term Description Type Properties Example Enum platform General platform technology label. It SHOULD be a subset of the platformModel and used only for query convenience, e.g. \"return everything sequenced with Illimuna\", where the specific model is not relevant string NA Illumina, Oxford Nanopore, Affymetrix NA","title":"Platform"},{"location":"schemas-md/obj/platformModel/","text":"Term Description Type Properties Example Enum platformModel Definition of an ontology term. object id , label NA NA","title":"platformModel"},{"location":"schemas-md/obj/population/","text":"Term Description Type Properties Example Enum population A name for the population. A population could an ethnic, geographical one or just the members of a study. string NA East Asian, ICGC Chronic Lymphocytic Leukemia-ES, Men, Children NA","title":"Population"},{"location":"schemas-md/obj/procedure/","text":"Term Description Type Properties Example Enum procedure Class describing a clinical procedure or intervention. Provenance: GA4GH Phenopackets v2 Procedure object ageAtProcedure , bodySite , dateOfProcedure , procedureCode NA NA","title":"Procedure"},{"location":"schemas-md/obj/procedureCode/","text":"Term Description Type Properties Example Enum procedureCode Definition of an ontology term. object id , label NA NA","title":"procedureCode"},{"location":"schemas-md/obj/proteinHGVSIds/","text":"Term Description Type Properties Example Enum proteinHGVSIds List of HGVSId descriptor(s) at protein level (for protein-altering variants). array NA [\"NP_009225.1:p.Glu1817Ter\"] , [\"LRG 199p1:p.Val25Gly (preferred)\"] NA","title":"proteinHGVSIds"},{"location":"schemas-md/obj/quantity/","text":"Term Description Type Properties Example Enum quantity Definition of a quantity class. Provenance: GA4GH Phenopackets v2 Quantity object referenceRange , unit , value NA NA","title":"Quantity"},{"location":"schemas-md/obj/reference/","text":"Term Description Type Properties Example Enum reference Definition of an external reference class. Provenance: GA4GH Phenopackets v2 ExternalReference object id , notes , reference NA NA","title":"Reference"},{"location":"schemas-md/obj/referenceBases/","text":"Term Description Type Properties Example Enum referenceBases Reference bases for this variant (starting from start ). * Accepted values: IUPAC codes for nucleotides (e.g. https://www.bioinformatics.org/sms/iupac.html ). N is a wildcard, that denotes the position of any base, and can be used as a standalone base of any type or within a partially known sequence. As example, a query of ANNT the Ns can take take any form of [ACGT] and will match ANNT , ACNT , ACCT , ACGT ... and so forth. * an empty value is used in the case of insertions with the maximally trimmed, inserted sequence being indicated in AlternateBases . NOTE: Many Beacon instances could not support UIPAC codes and it is not mandatory for them to do so. In such cases the use of [ACGTN] is mandated. string NA A, T, N, , ACG NA","title":"referenceBases"},{"location":"schemas-md/obj/referenceRange/","text":"Term Description Type Properties Example Enum referenceRange Definition of a range class. object high , low , unit NA NA","title":"referenceRange"},{"location":"schemas-md/obj/resolution/","text":"Term Description Type Properties Example Enum resolution NA oneOf Age , AgeRange , GestationalAge , TimeInterval NA NA","title":"Resolution"},{"location":"schemas-md/obj/role/","text":"Term Description Type Properties Example Enum role Definition of an ontology term. object id , label NA NA","title":"Role"},{"location":"schemas-md/obj/routeOfAdministration/","text":"Term Description Type Properties Example Enum routeOfAdministration Definition of an ontology term. object id , label NA NA","title":"routeOfAdministration"},{"location":"schemas-md/obj/runDate/","text":"Term Description Type Properties Example Enum runDate Date at which the experiment was performed. string NA 2021-10-18 NA","title":"runDate"},{"location":"schemas-md/obj/runId/","text":"Term Description Type Properties Example Enum runId Reference to the experimental run ID ( run.id ) string NA SRR10903401 NA","title":"runId"},{"location":"schemas-md/obj/sampleOriginDetail/","text":"Term Description Type Properties Example Enum sampleOriginDetail Definition of an ontology term. object id , label NA NA","title":"sampleOriginDetail"},{"location":"schemas-md/obj/sampleOriginType/","text":"Term Description Type Properties Example Enum sampleOriginType Definition of an ontology term. object id , label NA NA","title":"sampleOriginType"},{"location":"schemas-md/obj/sampleProcessing/","text":"Term Description Type Properties Example Enum sampleProcessing Definition of an ontology term. object id , label NA NA","title":"sampleProcessing"},{"location":"schemas-md/obj/sampleStorage/","text":"Term Description Type Properties Example Enum sampleStorage Definition of an ontology term. object id , label NA NA","title":"sampleStorage"},{"location":"schemas-md/obj/scheduleFrequency/","text":"Term Description Type Properties Example Enum scheduleFrequency Definition of an ontology term. object id , label NA NA","title":"scheduleFrequency"},{"location":"schemas-md/obj/severity/","text":"Term Description Type Properties Example Enum severity Definition of an ontology term. object id , label NA NA","title":"Severity"},{"location":"schemas-md/obj/sex/","text":"Term Description Type Properties Example Enum sex Definition of an ontology term. object id , label NA NA","title":"Sex"},{"location":"schemas-md/obj/source/","text":"Term Description Type Properties Example Enum source The study string NA The Genome Aggregation Database (gnomAD), The European Genome-phenome Archive (EGA) NA","title":"Source"},{"location":"schemas-md/obj/sourceReference/","text":"Term Description Type Properties Example Enum sourceReference A reference to further documentation or details. string NA gnomad.broadinstitute.org/ , ega-archive.org/ NA","title":"sourceReference"},{"location":"schemas-md/obj/stage/","text":"Term Description Type Properties Example Enum stage Definition of an ontology term. object id , label NA NA","title":"Stage"},{"location":"schemas-md/obj/start/","text":"Term Description Type Properties Example Enum start Age value definition. Provenance: GA4GH Phenopackets v2 Age object iso8601duration NA NA","title":"Start"},{"location":"schemas-md/obj/toolName/","text":"Term Description Type Properties Example Enum toolName Name of the tool. string NA Ensembl Variant Effect Predictor (VEP) NA","title":"toolName"},{"location":"schemas-md/obj/toolReferences/","text":"Term Description Type Properties Example Enum toolReferences References to the tool object NA [{\"bio.toolsId\": \"https://bio.tools/vep\"}, {\"url\": \"http://www.ensembl.org/vep\"}] NA","title":"toolReferences"},{"location":"schemas-md/obj/transcriptHGVSIds/","text":"Term Description Type Properties Example Enum transcriptHGVSIds List of HGVSId descriptor(s) at transcript level. array NA [\"NC 000023.10(NM004006.2):c.357+1G\"] NA","title":"transcriptHGVSIds"},{"location":"schemas-md/obj/treatmentCode/","text":"Term Description Type Properties Example Enum treatmentCode Definition of an ontology term. object id , label NA NA","title":"treatmentCode"},{"location":"schemas-md/obj/treatments/","text":"Term Description Type Properties Example Enum treatments NA array ageAtOnset , cumulativeDose , doseIntervals , routeOfAdministration , treatmentCode NA NA","title":"Treatments"},{"location":"schemas-md/obj/tumorGrade/","text":"Term Description Type Properties Example Enum tumorGrade Definition of an ontology term. object id , label NA NA","title":"tumorGrade"},{"location":"schemas-md/obj/tumorProgression/","text":"Term Description Type Properties Example Enum tumorProgression Definition of an ontology term. object id , label NA NA","title":"tumorProgression"},{"location":"schemas-md/obj/unit/","text":"Term Description Type Properties Example Enum unit Definition of an ontology term. object id , label NA NA","title":"Unit"},{"location":"schemas-md/obj/updateDateTime/","text":"Term Description Type Properties Example Enum updateDateTime Time in date-time ISO8601 string format. string NA 1999-08-05T17:21:00+01:00, 2002-09-21T02:37:00-08:00 NA","title":"updateDateTime"},{"location":"schemas-md/obj/value/","text":"Term Description Type Properties Example Enum value Quantification of the exposure. number NA NA NA","title":"Value"},{"location":"schemas-md/obj/variantAlternativeIds/","text":"Term Description Type Properties Example Enum variantAlternativeIds List of cross-referencing ID(s), for the variant in other databases (e.g. dbSNP, ClinVar, ClinGen, COSMIC), as externalReferences with CURIE(s). array id , notes , reference [{\"id\": \"dbSNP:rs587780345\", \"notes\": \"dbSNP id\", \"reference\": \"https://www.ncbi.nlm.nih.gov/snp/rs587780345\"}, {\"id\": \"ClinGen:CA152954\", \"notes\": \"ClinGen Allele Registry id\", \"reference\": \"http://reg.clinicalgenome.org/redmine/projects/registry/genboree_registry/by_caid?caid=CA152954\"}, {\"id\": \"UniProtKB:P35557#VAR_003699\", \"reference\": \"https://www.uniprot.org/uniprot/P35557#VAR_003699\"}] , [{\"id\": \"OMIM:164757.0001\", \"reference\": \"https://www.omim.org/entry/164757#0001\"}] NA","title":"variantAlternativeIds"},{"location":"schemas-md/obj/variantCaller/","text":"Term Description Type Properties Example Enum variantCaller Reference to variant calling software / pipeline string NA GATK4.0 NA","title":"variantCaller"},{"location":"schemas-md/obj/variantInternalId/","text":"Term Description Type Properties Example Enum variantInternalId Reference to the internal variant ID. This represents the primary key/identifier of that variant inside a given Beacon instance. Different Beacon instances may use identical id values, referring to unrelated variants. Public identifiers such as the GA4GH Variant Representation Id (VRSid) MUST be returned in the identifiers section. A Beacon instance can, of course, use the VRSid as their own internal id but still MUST represent this then in the identifiers section. string NA var00001, v110112 NA","title":"variantInternalId"},{"location":"schemas-md/obj/variantLevelData/","text":"Term Description Type Properties Example Enum variantLevelData NA object clinicalInterpretations , phenotypicEffects NA NA","title":"variantLevelData"},{"location":"schemas-md/obj/variantType/","text":"Term Description Type Properties Example Enum variantType The variantType declares the nature of the variation in relation to a reference. In a response, it is used to describe the variation. In a request, it is used to declare the type of event the Beacon client is looking for. If in queries variants can not be defined through a sequence of one or more bases ( precise variants) it can be used standalone (i.e. without alternateBases ) together with positional parameters. Examples here are e.g. queries for structural variants such as DUP (increased allelic count of material from the genomic region between start and end positions without assumption about the placement of the additional sequence) or DEL (deletion of sequence following start ). Either alternateBases or variantType is required, with the exception of range queries (single start and end parameters). string NA SNP, DEL, DUP, BND NA","title":"variantType"},{"location":"schemas-md/obj/variation/","text":"Term Description Type Properties Example Enum variation NA oneOf LegacyVariation , MolecularVariation , SystemicVariation NA NA","title":"Variation"},{"location":"schemas-md/obj/version/","text":"Term Description Type Properties Example Enum version version of the source data. string NA gnomAD v3.1.1 NA","title":"Version"},{"location":"schemas-md/obj/zygosity/","text":"Term Description Type Properties Example Enum zygosity Definition of an ontology term. object id , label NA NA","title":"Zygosity"}]}